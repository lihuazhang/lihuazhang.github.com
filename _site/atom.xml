<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://8atmyhouse.com</id>
  <title><![CDATA[8:00 PM at My House]]></title>
  <updated>2013-04-20T16:27:41+08:00</updated>
  
  <author>
    <name><![CDATA[晋恒温]]></name>
    
  </author>
  
  <link href="http://8atmyhouse.com/atom.xml" rel="self" />

  
  <entry>
    <id>http://8atmyhouse.com/blog/windowsxia-cha-zhao-zhan-yong-duan-kou-de-jin-cheng</id>
    <title><![CDATA[windows 下查找占用端口的进程]]></title>
    <updated>2013-03-21T21:02:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/windowsxia-cha-zhao-zhan-yong-duan-kou-de-jin-cheng.html" />
    <content type="html"><![CDATA[<p>一直只知道 *nux 下的命令，对 windows 知之甚少，其实 windows 下也有很多强大的命令。</p>

<p>比如在 linux 下查看一个 mysql 的端口，</p>
<div class="highlight"><pre><code class="text">➜  octopress git:(source) ✗ netstat -an | grep 3306 # mac 下的命令没有 linux 下来的丰富啊，没有 p 选项。
tcp4       0      0  *.3306                 *.*                    LISTEN

root@li493-58:~# netstat -anp | grep 3306 # 这是 ubuntu 下面的。
tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      2509/mysqld
</code></pre></div>
<p>很方便吧。那么如果在 windows 下呢？</p>
<div class="highlight"><pre><code class="text">netstat -ano | findstr 3306 # 这里会把 pid 告诉你，比如 pid 是 1278

tasklist /fi &quot;pid eq 1278&quot; # 这样就找到了 1278 对应的进程
</code></pre></div>
<p>也是很简单的吧！</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/8atmyhouse</id>
    <title><![CDATA[8atmyHouse]]></title>
    <updated>2013-03-15T22:18:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/8atmyhouse.html" />
    <content type="html"><![CDATA[<p>我工作 6 年。 2 年徐汇， 2 年 黄浦， 2 年 浦东。我住宝山区。我从一开始的愿望就是能踏着晨光上班，踩着夕阳下班。
从来或者很少实现。有几次生病的下午，实在顶不住，请假回家，当地铁从地下穿入高空的时候，晴脆的阳光撒进车厢，我就想
什么时候我可以不用朝九晚六。</p>

<p>8 at my house 说起来有段历史。2009 年，我在 DE 项目工作，8atmyHouse 就是这个项目的一个公用密码，很忙，每个人都希望
晚上八点能到家。不知道别人怎样，反正我能刚刚好，想起来在 google 上海的那段时间算得上是我职业生涯最快活的一段了。</p>

<p>离开之后，去了更远的张江集电港的 AMD， 每天 6 点出门，晚上 9 点到家。早上刮的干净的脸庞，晚上已胡子拉渣。除了感叹上海之大之外，
也恨宝山怎么没有高科技。三个月之后实在受不了，投了几份简历之后，有幸去了稍微近一点的浦东南路的智涌。上班一个小半时，下班一个半小时，
每天在跨越整个上海，从浦西到浦东，放在过去，就是每天去上海上班。</p>

<p>我到智涌后，也沿袭了 8atmyHouse 做密码的习惯。同事总会问， 为什么用这个密码，我说希望八点能在家坐在沙发上看看电视看看书。他们又会问，
能行么？我说看运气，如果永远踩着点，不落下任何一班车，那晚上8点半的时候，我可以坐在家里的电脑前。否则那八成还在回家的路上。同事问的多了，
后来连老板也调侃我，比如最近夏令时了，是不是应该改成 7atmyHouse 。我其实想说这不是都靠老板你了么？</p>

<p>八点在家，说起来是多么容易的事情啊，这 6 年却有几次？也许再有猎头找我的时候，我一定告诉他，我要求不高，8 at my home!</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/shi-yong-capybara-deng-lu-bai-du</id>
    <title><![CDATA[使用 capybara 登陆百度]]></title>
    <updated>2013-02-12T17:14:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/shi-yong-capybara-deng-lu-bai-du.html" />
    <content type="html"><![CDATA[<p>ShiLongLu 问你有什么办法测试百度的登录窗口呢？这是差不多2个月前的问题了，我一直忙于 Dota 圣剑传说。恰巧春节有时间看了下。</p>

<p>百度登陆的时候是弹出一个对话框，如图：</p>

<p><img src="/photos/baidulogin.png" alt=""></p>

<p>但是这个对话框是用 iframe 实现的。</p>
<div class="highlight"><pre><code class="html"><span class="nt">&lt;iframe</span> <span class="na">height=</span><span class="s">&quot;100%&quot;</span> <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span> <span class="na">src=</span><span class="s">&quot;http://www.baidu.com/cache/user/html/login-1.2.html&quot;</span> <span class="na">marginheight=</span><span class="s">&quot;0&quot;</span> <span class="na">marginwidth=</span><span class="s">&quot;0&quot;</span> <span class="na">id=</span><span class="s">&quot;login_iframe&quot;</span><span class="nt">&gt;</span>
...
...
...
<span class="nt">&lt;/iframe&gt;</span>
</code></pre></div>
<p>所以在填写用户名和密码的时候，需要先 switch 到这个 frame 上去， </p>

<blockquote>
<p>When working inside a frame, you should use Capybara&#39;s within_frame method.</p>

<ul>
<li>(Object) within<em>frame(frame</em>id)</li>
</ul>

<p>Execute the given block within the given iframe given the id of that iframe. Only works on some drivers (e.g. Selenium)</p>

<p>Parameters:
frame_id (String) — Id of the frame</p>
</blockquote>

<p>所以我们的实现基本如下：</p>

<p>baidu.feature:</p>
<div class="highlight"><pre><code class="ruby"><span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="n">baidu</span><span class="o">.</span><span class="n">com</span>
<span class="no">When</span> <span class="n">I</span>  <span class="n">click</span> <span class="s2">&quot;登录&quot;</span>
<span class="no">And</span> <span class="n">I</span> <span class="n">switch</span> <span class="n">to</span> <span class="n">login</span> <span class="n">form</span>
<span class="no">And</span> <span class="n">I</span> <span class="n">enter</span> <span class="s2">&quot;lihuazhang@hotmail.com&quot;</span> <span class="k">for</span> <span class="s2">&quot;帐号&quot;</span>
<span class="no">And</span> <span class="n">I</span> <span class="n">enter</span> <span class="s2">&quot;204646&quot;</span> <span class="k">for</span> <span class="s2">&quot;密码&quot;</span>
<span class="no">And</span> <span class="n">I</span> <span class="n">click</span> <span class="s2">&quot;登录&quot;</span> <span class="n">button</span>
<span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="s2">&quot;zhangzuichi&quot;</span>
</code></pre></div>
<p>step_definition.rb:</p>
<div class="highlight"><pre><code class="ruby"><span class="no">When</span> <span class="sr">/^I enter &quot;(.*?)&quot; for &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
  <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="s2">&quot;帐号&quot;</span>
    <span class="n">within_frame</span> <span class="s1">&#39;login_iframe&#39;</span> <span class="k">do</span>
      <span class="n">fill_in</span> <span class="s1">&#39;pass_login_username_0&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">value</span>
    <span class="k">end</span>
  <span class="k">else</span>
     <span class="n">within_frame</span> <span class="s1">&#39;login_iframe&#39;</span> <span class="k">do</span>
      <span class="n">fill_in</span> <span class="s1">&#39;pass_login_password_0&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">value</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">When</span> <span class="sr">/^I click &quot;(.*?)&quot; button$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
  <span class="n">within_frame</span> <span class="s1">&#39;login_iframe&#39;</span> <span class="k">do</span>
    <span class="n">click_button</span> <span class="s1">&#39;pass_login_input_submit_0&#39;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>大致如此，在 firefox 下测试通过。</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/gao-bie-2012</id>
    <title><![CDATA[告别2012]]></title>
    <updated>2013-02-12T10:57:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/gao-bie-2012.html" />
    <content type="html"><![CDATA[<p>2011年6月我离开AMD，进入现在这家公司，转眼2年快过去了。现在每次和同事聊起来，都觉得其实现在的这家公司很亏。
我们几乎所有的员工在这里都完成了各自人生的大事。比如结婚，比如生子，比如怀孕。到了我这种年纪的人事业慢慢靠边站，
婚姻家庭走上舞台。这或多或少的对公司总会有点影响。</p>

<p>2012年9月中旬，和小顾去香港兜了一圈。<br>
2012年10月1日，我在家里操办了婚宴。之后和小顾开始了两人生活。<br>
2012年11月，报名练车。<br>
2012年12月，练车。<br>
2013年1月，去北京兜了一圈。加练车。<br>
2013年2月，小顾小路过了。我还没考。过春节。  </p>

<p>公司比起2011年来更加不景气，美国裁员之后，真正做事的都走了，剩下一些开会和管事的人。上海部门和美国的沟通也越发的困难，我们从本来的一个研发部门变成了一个信息孤岛，彻底成了美国总部的一个外包。大家抱怨的声音也越来越大，头儿们也不知道如何安慰。春节房间前， Jacky 提出了离职，大家唏嘘不已。</p>

<p>业余时间做的游戏不好不坏，在这里打个广告，<a href="http://dota.baicaisi.net">Doat 圣剑传说</a>, android 和 ios 同步发布。</p>

<p><img src="http://dota.baicaisi.net/images/screenshots/2.png" alt=""></p>

<p>瞧着不错吧！欢迎大家试玩，也希望大家能帮忙宣传下，我们不会做营销，只有口口相传的用户。当然口碑不错。</p>

<p>2012年，过得不好不坏，咋一想，啥也回忆不起来，唯有那次在北京滑雪，从山顶一冲而下的光景。</p>

<p><img src="/photos/huaxue.jpg" alt=""></p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/ying-she-windows-cmdke-yi-du-qu-de-ci-pan-qu-dong</id>
    <title><![CDATA[映射 Windows cmd 可以读取的磁盘驱动]]></title>
    <updated>2012-08-06T21:58:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/ying-she-windows-cmdke-yi-du-qu-de-ci-pan-qu-dong.html" />
    <content type="html"><![CDATA[<p>在 windows 下， 通常我们映射一个网路驱动到本地的时候， 会在本地生成一个文件夹与之映射。
然后我们就可以通过这个文件夹访问和操作资源（当然你得有权限），好像操作本地文件一样。但是这样，
似乎就不能通过命令行访问。（不知道为什么，但是最近遇到这个问题）</p>

<p>贴出解决方法：</p>

<p><em>1.</em> 进入命令行窗口。</p>

<blockquote>
<p>使用 Alt + F2， 然后输入 cmd， 回车。 或者从开始菜单，运行那里输入cmd，回车。</p>
</blockquote>

<p><em>2.</em> 输入<code>net use X: \\path\to\share</code>， X 是你要映射的盘符， \path\to\share 就是你的网络驱动地址。</p>

<p><em>3.</em> 回车，然后成功~</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/surround-dot-vim</id>
    <title><![CDATA[surround.vim]]></title>
    <updated>2012-08-05T09:37:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/surround-dot-vim.html" />
    <content type="html"><![CDATA[<p>一般写东西的时候，总会遇到比如写了一长串文字后，突然想给这串文字头尾加个括号，
或者引号。其实很多编辑器都提供这种功能，选中，然后输入括号。但是一直用 Vim，也没发现
有这种功能， 也只能怪自己没有研究。 后来网上找了一圈， 发现了原来有这个插件： <a href="https://github.com/tpope/vim-surround/">surround.vim</a>。</p>

<blockquote>
<p>Surround.vim is all about &quot;surroundings&quot;: parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.</p>
</blockquote>

<p>先看下全部的快捷键：</p>

<p><img src="/photos/allkey.png" alt=""></p>

<p>可以看到基本有三种操作：</p>

<ul>
<li>删除</li>
</ul>

<p>ds 加包在两边的引号，括号或者标签（标签全部用t代替）。</p>

<p>e.g:</p>

<p>&quot;hello, world!&quot; =&gt; hello, world! 只要输入 <code>ds&quot;</code></p>

<p>&lt;strong&gt;hello, world!&lt;/strong&gt; =&gt; hello, world! 只要输入 <code>dst</code></p>

<ul>
<li>添加</li>
</ul>

<p><img src="/photos/addkey.png" alt=""></p>

<p>note: s 代表sentence iw/w 代表 word。</p>

<ul>
<li>修改</li>
</ul>

<p><img src="/photos/changekey.png" alt=""></p>

<p>截图来自<a href="http://ihacklog.com/post/vim-plugins-you-should-know-about-surround.html">你应该知道的vim插件之surround.vim</a></p>

<p>到此， surround vim 你就基本掌握了。 如果你对这些快捷键能倒敲入流，那么你一定能得到许多的便捷。 XD</p>

<p>扩展阅读： Text Object
&lt;!-- more --&gt;</p>

<h2>Vim 的 text object</h2>

<p>除了和单个字符打交道外， 我们还处理单词， 句子还有段落， 这些在 Vim 中就是<strong>文本对象</strong>。
Vim 中纯文本和常见编程语言都有文本对象。也可以利用 Vim 脚本自定义新的文本对象。</p>

<p>Vim 中，编辑命令有如下结构：</p>
<div class="highlight"><pre><code class="vim"><span class="p">&lt;</span><span class="k">number</span><span class="p">&gt;&lt;</span>command<span class="p">&gt;&lt;</span>text object or motion<span class="p">&gt;</span>
</code></pre></div>
<p><strong>number</strong> 用于将命令使用于多个文本对象或移动，如，向后移动三个单词、向前移动两个段落。 number 是可选项，且可以出现在命令的前面或后面。</p>

<p><strong>command</strong> 是一个操作，如，修改、删除(剪切)，或复制。 command 也是可选的，但如果没有，就只是移动命令，而不是编辑命令。</p>

<p><strong>text object</strong> 或 motion 可以是一个文本结构，如单词、句子、段落或移动， 如，向前移行，向后一页，行尾。</p>

<p><strong>editing command</strong> 即一个命令加上一个文本对象或移动，如，删除一个单词，修改下一个句子， 复制这个段落。</p>

<h3>普通文本对象</h3>

<p>普通文本中， Vim 提供三种行为模块： words, sentences and paragraphs.</p>

<p><strong>Words</strong></p>

<ul>
<li>   aw – 环绕单词对象 (包括单词外面的空格字符)</li>
<li>   iw – 在单词对象内部 (不包括单词外面的空格字符)</li>
</ul>

<p><code>hello world vim!</code></p>

<p>在world单词中间敲打 <code>daw</code></p>

<p><code>hello_vim!</code> 注意： 一个空格,下划线代替</p>

<p><code>hello world vim!</code></p>

<p>在world单词中间敲打 <code>diw</code></p>

<p><code>hello__vim!</code> 注意： 两个空格，下划线代替</p>

<p><strong>Sentences</strong></p>

<ul>
<li>as - 环绕句子对象</li>
<li>is - 在句子对象内部</li>
</ul>

<p>和 Words 同意的道理。 a 表示around， i 表示inner。</p>

<p><strong>Paragraphs</strong></p>

<ul>
<li>ap – 环绕段落对象</li>
<li>ip – 在段落对象内部</li>
</ul>

<p>和 Words 同意的道理。 a 表示around， i 表示inner。</p>

<h3>编语言文本对象</h3>

<p>Vim 基于常见变成语言结构提供了一些文本对象。</p>

<p><strong>字符串</strong></p>

<ul>
<li>a&quot; - 双引号括起来的字符串</li>
<li>i&#39; - 双引号括起来的字符串内</li>
<li>a&quot; - 单引号括起来的字符串</li>
<li>i&#39; - 单引号括起来的字符串内</li>
<li>a` - 反向引号括起来的字符串</li>
<li>a` - 反向引号括起来的字符串内</li>
</ul>

<p>光标不需要在引号内，命令默认会寻找当前行的第一个引号。</p>

<p><strong>圆括弧</strong></p>

<ul>
<li>a) - 一个括弧块</li>
<li>i) - 括弧块内</li>
<li>% 移动是另一种匹配括弧块的方法。 c% 与 ca( 相同。不同点也在于对光标位置的要求。</li>
</ul>

<p><strong>方括弧</strong></p>

<ul>
<li>a] - 一个方括弧块</li>
<li>i] - 方括弧块内</li>
</ul>

<p><strong>花括弧</strong></p>

<ul>
<li>a} - 一个花括弧块</li>
<li>i} - 花括弧内</li>
</ul>

<p><strong>标记语言标签</strong></p>

<ul>
<li>at - 一个标签块</li>
<li>it - 标签块内</li>
<li>a&gt; - 单个标签</li>
<li>i&gt; - 单个标签内</li>
</ul>

<p>其实可以参见:</p>

<ul>
<li><a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"> Vim Text Objects: The Definitive Guide </a></li>
<li><a href="http://zwb.me/blog/learn-to-speak-vim/">(译) Vim Text Objects - The Definitive Guide</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/wo-de-vimrc</id>
    <title><![CDATA[我的vimrc]]></title>
    <updated>2012-08-04T17:39:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/wo-de-vimrc.html" />
    <content type="html"><![CDATA[<p>网上有很多 vim 套件， 之前一直用 <a href="http://spf13.com/project/spf13-vim">spf13</a>， 后来又用 janus。
时间久了，就自己琢磨着凑了一套自己的， 在公司里推广了一把，感觉效果不错， 吸引了几个同事转投 vim。
我试着解释下 .vimrc 里面的内容， 虽然很多我也不知道，（估计是哪里拷贝来的，还没来得及研究）</p>
<div class="highlight"><pre><code class="vim">先看这个Modeline， Modeline 就是指定这个文件的格式，
告诉别人下次用 <span class="k">vim</span> 打开这个文件时候，采用相同的设置。
默认的情况下，<span class="k">vim</span> 会在开头和结尾的 <span class="m">5</span> 行<span class="p">(</span>由 <span class="s1">&#39;modelines&#39;</span> 控制<span class="p">)</span>
内查找包含 <span class="k">vim</span>: 或者 <span class="k">vi</span>: 之类内容的行，然后根据这行的内容配置本地变量。
所以这里就是告诉 <span class="k">vim</span> 使用大括号来折叠。

<span class="c">&quot; Modeline {</span>
<span class="c">&quot; vim: set foldmarker={,} foldlevel=0 foldmethod=marker :</span>
<span class="c">&quot; }</span>

下面是 Vundle， 这是一个管理 Vim 插件的工具。
具体的可以参见 https:<span class="sr">//</span>github.<span class="k">com</span><span class="sr">/gmarik/</span>vundle/
按照它的说明，你就可以轻松的使用各种插件。
常用的插件不多：
<span class="m">1</span>. nerdtree
<span class="m">2</span>. ctrlp
<span class="m">3</span>. snipmate<span class="p">-</span>snippets
<span class="m">4</span>. The<span class="p">-</span>NERD<span class="p">-</span>Commenter
<span class="m">5</span>. <span class="k">vim</span><span class="p">-</span>fugitive
<span class="m">6</span>. <span class="k">vim</span><span class="p">-</span>surround
<span class="m">7</span>. <span class="k">vim</span><span class="p">-</span>rails

我基本就用这几个插件。别的还没发现是什么作用，但是就放在那里了。。。
插件的功能我就不介绍了。网上教程一大堆。

<span class="c">&quot; Vundle {</span>
<span class="k">set</span> <span class="nb">nocompatible</span>               <span class="c">&quot; be iMproved</span>
<span class="k">filetype</span> off                   <span class="c">&quot; required!</span>

<span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
<span class="k">call</span> vundle#rc<span class="p">()</span>

<span class="c">&quot; let Vundle manage Vundle</span>
<span class="c">&quot; required!</span>
Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>

<span class="c">&quot; My Bundles here:</span>
<span class="c">&quot;</span>
<span class="c">&quot; original repos on github</span>
Bundle <span class="s1">&#39;Lokaltog/vim-easymotion&#39;</span>
<span class="c">&quot; vim-scripts repos</span>
Bundle <span class="s1">&#39;L9&#39;</span>
Bundle <span class="s1">&#39;FuzzyFinder&#39;</span>
<span class="c">&quot; non github repos</span>
Bundle <span class="s1">&#39;git://git.wincent.com/command-t.git&#39;</span>
<span class="c">&quot;--------------------------</span>
<span class="c">&quot; tpope plugins</span>
<span class="c">&quot;--------------------------</span>
<span class="c">&quot; disable pathogen, use vundle instead</span>
<span class="c">&quot;runtime bundle/pathogen/autoload/pathogen.vim</span>
<span class="c">&quot;call pathogen#infect()</span>
<span class="c">&quot;Bundle &#39;tpope/tpope/vim-pathogen&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-fugitive&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-surround&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-abolish&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-speeddating&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-repeat&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-unimpaired&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-rails&#39;</span>

<span class="c">&quot;--------------------------</span>
<span class="c">&quot; utility</span>
<span class="c">&quot;--------------------------</span>
Bundle <span class="s1">&#39;edsono/vim-matchit&#39;</span>
Bundle <span class="s1">&#39;Raimondi/delimitMate&#39;</span>
Bundle <span class="s1">&#39;greyblake/vim-preview&#39;</span>
Bundle <span class="s1">&#39;vim-scripts/jsbeautify&#39;</span>
Bundle <span class="s1">&#39;vim-scripts/The-NERD-Commenter&#39;</span>
Bundle <span class="s1">&#39;godlygeek/tabular&#39;</span>
Bundle <span class="s1">&#39;nvie/vim-togglemouse&#39;</span>
Bundle <span class="s1">&#39;mattn/zencoding-vim&#39;</span>
<span class="c">&quot; alternative for zencoding</span>
Bundle <span class="s1">&#39;rstacruz/sparkup&#39;</span><span class="p">,</span> {<span class="s1">&#39;rtp&#39;</span>: <span class="s1">&#39;vim/&#39;</span>}
Bundle <span class="s1">&#39;wojtekmach/vim-rename&#39;</span>
Bundle <span class="s1">&#39;vim-scripts/loremipsum&#39;</span>

<span class="c">&quot;--------------------------</span>
<span class="c">&quot; tool for explorer</span>
<span class="c">&quot;--------------------------</span>
Bundle <span class="s1">&#39;corntrace/bufexplorer&#39;</span>
Bundle <span class="s1">&#39;scrooloose/nerdtree&#39;</span>
Bundle <span class="s1">&#39;majutsushi/tagbar&#39;</span>
Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
Bundle <span class="s1">&#39;vim-scripts/ctags.vim&#39;</span>
Bundle <span class="s1">&#39;mileszs/ack.vim&#39;</span>

<span class="c">&quot;--------------------------</span>
<span class="c">&quot; filetype syntax highlight</span>
<span class="c">&quot;--------------------------</span>
Bundle <span class="s1">&#39;groenewege/vim-less&#39;</span>
Bundle <span class="s1">&#39;kchmck/vim-coffee-script&#39;</span>
Bundle <span class="s1">&#39;plasticboy/vim-markdown&#39;</span>
Bundle <span class="s1">&#39;depuracao/vim-rdoc&#39;</span>
Bundle <span class="s1">&#39;mamut/vim-css-hex&#39;</span>
Bundle <span class="s1">&#39;git://github.com/chrisbra/color_highlight.git&#39;</span>
<span class="c">&quot;--------------------------</span>
<span class="c">&quot; color scheme</span>
<span class="c">&quot;--------------------------</span>
Bundle <span class="s1">&#39;rickharris/vim-blackboard&#39;</span>
Bundle <span class="s1">&#39;altercation/vim-colors-solarized&#39;</span>
Bundle <span class="s1">&#39;endel/vim-github-colorscheme&#39;</span>
Bundle <span class="s1">&#39;git://github.com/tomasr/molokai.git&#39;</span>

<span class="c">&quot;--------------------------</span>
<span class="c">&quot; snipmate</span>
<span class="c">&quot;--------------------------</span>
Bundle <span class="s1">&#39;garbas/vim-snipmate&#39;</span>
Bundle <span class="s1">&#39;honza/snipmate-snippets&#39;</span>
Bundle <span class="s1">&#39;git://github.com/Shougo/neocomplcache.git&#39;</span>
Bundle <span class="s1">&#39;tomtom/tlib_vim&#39;</span>
Bundle <span class="s1">&#39;MarcWeber/vim-addon-mw-utils&#39;</span>
Bundle <span class="s1">&#39;git://github.com/drmingdrmer/xptemplate.git&#39;</span>
Bundle <span class="s1">&#39;git://github.com/ervandew/supertab.git&#39;</span>


<span class="k">filetype</span> plugin indent <span class="k">on</span>     <span class="c">&quot; required!</span>
<span class="c">&quot;</span>
<span class="c">&quot; Brief help</span>
<span class="c">&quot; :BundleList          - list configured bundles</span>
<span class="c">&quot; :BundleInstall(!)    - install(update) bundles</span>
<span class="c">&quot; :BundleSearch(!) foo - search(or refresh cache first) for foo</span>
<span class="c">&quot; :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles</span>
<span class="c">&quot;</span>
<span class="c">&quot; see :h vundle for more details or wiki for FAQ</span>
<span class="c">&quot; NOTE: comments after Bundle command are not allowed..</span>
<span class="c">&quot; }</span>

这里就是一些基本的配置， 比如 leader 映射成逗号。
主题是用 molokai。每条后面都有基本说明。

<span class="c">&quot; Basic setting {</span>

<span class="k">let</span> mapleader <span class="p">=</span> <span class="s2">&quot;,&quot;</span>
<span class="k">color</span> molokai
<span class="k">set</span> <span class="nb">nocompatible</span>      <span class="c">&quot; Use vim, no vi defaults</span>
<span class="k">set</span> <span class="k">number</span>            <span class="c">&quot; Show line numbers</span>
<span class="nb">syntax</span> enable         <span class="c">&quot; Turn on syntax highlighting allowing local overrides</span>
<span class="k">set</span> <span class="nb">foldenable</span>

<span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>    <span class="s2">&quot; Set default encoding to UTF-8&quot;</span>

<span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>                <span class="c">&quot; use indents of 4 spaces</span>
<span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span>                   <span class="c">&quot; an indentation every four columns</span>
<span class="k">set</span> <span class="nb">softtabstop</span><span class="p">=</span><span class="m">4</span>               <span class="c">&quot; let backspace delete indent</span>
<span class="k">set</span> <span class="nb">expandtab</span>                   <span class="c">&quot; tabs are spaces, not tabs</span>
<span class="k">set</span> <span class="nb">nowrap</span>
<span class="k">set</span> <span class="nb">autoindent</span>

<span class="k">set</span> <span class="nb">hlsearch</span>    <span class="c">&quot; highlight matches</span>
<span class="k">set</span> <span class="nb">incsearch</span>   <span class="c">&quot; incremental searching</span>
<span class="k">set</span> <span class="nb">ignorecase</span>  <span class="c">&quot; searches are case insensitive...</span>
<span class="k">set</span> <span class="nb">smartcase</span>   <span class="s2">&quot; ... unless they contain at least one capital letter&quot;</span>

<span class="nb">ruler</span> 和 <span class="nb">statusline</span> 就是最底下的一堆信息， 比如文件名啊， git的信息啊等等。

<span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;cmdline_info&#39;</span><span class="p">)</span>
    <span class="k">set</span> <span class="nb">ruler</span>                   <span class="c">&quot; show the ruler</span>
    <span class="k">set</span> <span class="nb">rulerformat</span><span class="p">=</span>%<span class="m">30</span><span class="p">(</span>%<span class="p">=</span>\:<span class="k">b</span>%<span class="k">n</span>%<span class="k">y</span>%<span class="k">m</span>%<span class="k">r</span>%<span class="k">w</span>\ %<span class="k">l</span><span class="p">,</span>%<span class="k">c</span>%V\ %<span class="k">P</span>%<span class="p">)</span> <span class="c">&quot; a ruler on steroids</span>
    <span class="k">set</span> <span class="nb">showcmd</span>                 <span class="c">&quot; show partial commands in status line and</span>
<span class="c">    &quot; selected characters/lines in visual mode</span>
<span class="k">endif</span>

<span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;statusline&#39;</span><span class="p">)</span>
    <span class="k">set</span> <span class="nb">laststatus</span><span class="p">=</span><span class="m">2</span>

<span class="c">    &quot; Broken down into easily includeable segments</span>
    <span class="k">set</span> <span class="nb">statusline</span><span class="p">=</span>%<span class="p">&lt;</span>%<span class="k">f</span>\    <span class="c">&quot; Filename</span>
    <span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%<span class="k">w</span>%<span class="k">h</span>%<span class="k">m</span>%<span class="k">r</span> <span class="c">&quot; Options</span>
    <span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%{fugitive#<span class="nb">statusline</span><span class="p">()</span>} <span class="c">&quot;  Git Hotness</span>
    <span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>\ [%{&amp;<span class="nb">ff</span>}/%Y]            <span class="c">&quot; filetype</span>
    <span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>\ [%{getcwd<span class="p">()</span>}]          <span class="c">&quot; current dir</span>
    <span class="k">set</span> <span class="nb">statusline</span><span class="p">+=</span>%<span class="p">=</span>%<span class="m">-14</span>.<span class="p">(</span>%<span class="k">l</span><span class="p">,</span>%<span class="k">c</span>%V%<span class="p">)</span>\ %<span class="k">p</span>%%  <span class="c">&quot; Right aligned file nav info</span>
<span class="k">endif</span>

这里是设置光标所在的这一行的高亮属性。

<span class="k">set</span> <span class="nb">cursorline</span>
<span class="nb">highlight</span> <span class="nb">cursorline</span> <span class="nb">term</span><span class="p">=</span><span class="nb">underline</span> cterm<span class="p">=</span><span class="nb">NONE</span> ctermbg<span class="p">=</span><span class="m">0</span> <span class="k">gui</span><span class="p">=</span><span class="nb">NONE</span> guibg<span class="p">=</span>Grey40
<span class="k">if</span> has<span class="p">(</span><span class="s2">&quot;autocmd&quot;</span><span class="p">)</span>
<span class="c">    &quot; current line</span>
    <span class="k">au</span> <span class="nb">WinLeave</span> * <span class="k">set</span> <span class="nb">nocursorline</span>
    <span class="k">au</span> <span class="nb">WinEnter</span> * <span class="k">set</span> <span class="nb">cursorline</span>
<span class="k">endif</span>

<span class="nb">highlight</span> LineNr ctermbg<span class="p">=</span>black guibg<span class="p">=</span>black
<span class="nb">highlight</span> LineNr guifg<span class="p">=</span>grey
<span class="nb">highlight</span> LineNr ctermfg<span class="p">=</span>grey

nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">l</span> :<span class="k">set</span> <span class="nb">list</span><span class="p">!&lt;</span>CR<span class="p">&gt;</span>
nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">s</span> :<span class="k">set</span> <span class="k">spell</span><span class="p">!&lt;</span>CR<span class="p">&gt;</span>
<span class="k">set</span> <span class="nb">pastetoggle</span><span class="p">=&lt;</span>leader<span class="p">&gt;</span><span class="k">p</span>
cmap <span class="k">w</span><span class="p">!!</span> %<span class="p">!</span>sudo tee <span class="p">&gt;</span> <span class="sr">/dev/</span>null %

显示<span class="k">tab</span>为这个小三角符号。

<span class="k">set</span> <span class="nb">listchars</span><span class="p">=</span><span class="k">tab</span>:▸\ <span class="p">,</span><span class="nb">eol</span>:¬
<span class="nb">highlight</span> NonText guifg<span class="p">=</span><span class="mh">#4a4a59</span>
<span class="nb">highlight</span> SpecialKey guifg<span class="p">=</span><span class="mh">#4a4a59</span>

这个函数是说将每行最后的空格删除。我在每次保存的时候调用。

<span class="k">function</span><span class="p">!</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>StripTrailingWhitespaces<span class="p">()</span>
<span class="c">    &quot; Preparation: save last search, and cursor position.</span>
    <span class="k">let</span> _s<span class="p">=</span>@/
    <span class="k">let</span> <span class="k">l</span> <span class="p">=</span> line<span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span>
    <span class="k">let</span> <span class="k">c</span> <span class="p">=</span> <span class="k">col</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span>
<span class="c">    &quot; Do the business:</span>
    %<span class="k">s</span><span class="sr">/\s\+$/</span>/<span class="k">e</span>
<span class="c">    &quot; Clean up: restore previous search history, and cursor position</span>
    <span class="k">let</span> @/<span class="p">=</span>_s
    <span class="k">call</span> cursor<span class="p">(</span><span class="k">l</span><span class="p">,</span> <span class="k">c</span><span class="p">)</span>
<span class="k">endfunction</span>

autocmd <span class="nb">BufWritePre</span> * :<span class="k">call</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>StripTrailingWhitespaces<span class="p">()</span>

<span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*.<span class="k">o</span><span class="p">,</span>*.out<span class="p">,</span>*.obj<span class="p">,</span>.git<span class="p">,</span>*.rbc<span class="p">,</span>*.rbo<span class="p">,</span>*.class<span class="p">,</span>.svn<span class="p">,</span>*.gem
<span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*.zip<span class="p">,</span>*.tar.gz<span class="p">,</span>*.tar.bz2<span class="p">,</span>*.rar<span class="p">,</span>*.tar.xz
<span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*<span class="sr">/vendor/</span>gems<span class="sr">/*,*/</span>vendor<span class="sr">/cache/</span>*<span class="p">,</span>*<span class="sr">/.bundle/</span>*<span class="p">,</span>*<span class="sr">/.sass-cache/</span>*
<span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*.swp<span class="p">,</span>*<span class="p">~,</span>._*
<span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*.<span class="k">o</span><span class="p">,</span>*.obj<span class="p">,</span>.git<span class="p">,</span>*.pyc

<span class="k">set</span> <span class="nb">autowrite</span>
<span class="k">set</span> <span class="nb">backup</span>
<span class="k">set</span> <span class="nb">backupdir</span><span class="p">=~</span><span class="sr">/.vim/</span><span class="nb">backup</span>    <span class="c">&quot; where to put backup files.</span>
<span class="k">set</span> <span class="nb">backupext</span><span class="p">=</span>.bak
<span class="k">set</span> <span class="nb">directory</span><span class="p">=~</span><span class="sr">/.vim/</span>temp      <span class="c">&quot; where to put swap files.</span>

<span class="k">set</span> <span class="nb">sessionoptions</span><span class="p">=</span>blank<span class="p">,</span><span class="k">buffers</span><span class="p">,</span>curdir<span class="p">,</span>folds<span class="p">,</span>tabpages<span class="p">,</span>winsize
autocmd <span class="nb">BufReadPost</span> *
            \ <span class="k">if</span> line<span class="p">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="p">)</span> <span class="p">&gt;</span> <span class="m">1</span> &amp;&amp; line<span class="p">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="p">)</span> <span class="p">&lt;=</span> line<span class="p">(</span><span class="s2">&quot;$&quot;</span><span class="p">)</span> <span class="p">|</span>
            \   exe <span class="s2">&quot;normal! g`\&quot;&quot;</span> <span class="p">|</span>
            \ <span class="k">endif</span>

<span class="c">&quot; }</span>

<span class="c">&quot; NerdTree {</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">n</span> :NERDTreeToggle<span class="p">&lt;</span>CR<span class="p">&gt;</span>:NERDTreeMirror<span class="p">&lt;</span>CR<span class="p">&gt;</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">e</span> :NERDTreeFind<span class="p">&lt;</span>CR<span class="p">&gt;</span>
nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span>nt :NERDTreeFind<span class="p">&lt;</span>CR<span class="p">&gt;</span>

<span class="k">let</span> NERDTreeShowBookmarks<span class="p">=</span><span class="m">1</span>
<span class="k">let</span> NERDChristmasTree<span class="p">=</span><span class="m">1</span>
<span class="k">let</span> NERDTreeIgnore<span class="p">=</span>[<span class="s1">&#39;\.pyc&#39;</span><span class="p">,</span> <span class="s1">&#39;\~$&#39;</span><span class="p">,</span> <span class="s1">&#39;\.swo$&#39;</span><span class="p">,</span> <span class="s1">&#39;\.swp$&#39;</span><span class="p">,</span> <span class="s1">&#39;\.git&#39;</span><span class="p">,</span> <span class="s1">&#39;\.hg&#39;</span><span class="p">,</span> <span class="s1">&#39;\.svn&#39;</span><span class="p">,</span> <span class="s1">&#39;\.bzr&#39;</span>]
<span class="k">let</span> NERDTreeChDirMode<span class="p">=</span><span class="m">0</span>
<span class="k">let</span> NERDTreeQuitOnOpen<span class="p">=</span><span class="m">1</span>
<span class="k">let</span> NERDTreeShowHidden<span class="p">=</span><span class="m">1</span>
<span class="k">let</span> NERDTreeKeepTreeInNewTab<span class="p">=</span><span class="m">1</span>

autocmd <span class="nb">WinEnter</span> * <span class="k">call</span> <span class="k">s</span>:CloseIfOnlyNerdTreeLeft<span class="p">()</span>

<span class="c">&quot; Close all open buffers on entering a window if the only</span>
<span class="c">&quot; buffer that&#39;s left is the NERDTree buffer</span>
<span class="k">function</span><span class="p">!</span> <span class="k">s</span>:CloseIfOnlyNerdTreeLeft<span class="p">()</span>
    <span class="k">if</span> exists<span class="p">(</span><span class="s2">&quot;t:NERDTreeBufName&quot;</span><span class="p">)</span>
        <span class="k">if</span> bufwinnr<span class="p">(</span><span class="k">t</span>:NERDTreeBufName<span class="p">)</span> <span class="p">!=</span> <span class="m">-1</span>
            <span class="k">if</span> winnr<span class="p">(</span><span class="s2">&quot;$&quot;</span><span class="p">)</span> <span class="p">==</span> <span class="m">1</span>
                <span class="k">q</span>
            <span class="k">endif</span>
        <span class="k">endif</span>
    <span class="k">endif</span>
<span class="k">endfunction</span>
<span class="c">&quot; }</span>

<span class="c">&quot; Fugitive {</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">gs</span> :Gstatus<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="nb">gd</span> :Gdiff<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>gc :Gcommit<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>gb :Gblame<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>gl :Glog<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="nb">gp</span> :Git push<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="c">&quot;}</span>

<span class="c">&quot; Tabularize {</span>
<span class="k">if</span> exists<span class="p">(</span><span class="s2">&quot;:Tabularize&quot;</span><span class="p">)</span>
    nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">a</span><span class="p">=</span> :Tabularize /<span class="p">=&lt;</span>CR<span class="p">&gt;</span>
    vmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">a</span><span class="p">=</span> :Tabularize /<span class="p">=&lt;</span>CR<span class="p">&gt;</span>
    nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">a</span>: :Tabularize /:\zs<span class="p">&lt;</span>CR<span class="p">&gt;</span>
    vmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">a</span>: :Tabularize /:\zs<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="k">endif</span>
<span class="c">&quot;}</span>

<span class="c">&quot; CommandT {</span>
<span class="k">let</span> <span class="k">g</span>:CommandTMaxHeight <span class="p">=</span> <span class="m">15</span>
<span class="c">&quot;}</span>

<span class="c">&quot; OmniComplete {</span>
<span class="k">if</span> has<span class="p">(</span><span class="s2">&quot;autocmd&quot;</span><span class="p">)</span> &amp;&amp; exists<span class="p">(</span><span class="s2">&quot;+omnifunc&quot;</span><span class="p">)</span>
    autocmd Filetype *
                \<span class="k">if</span> &amp;<span class="nb">omnifunc</span> <span class="p">==</span> <span class="s2">&quot;&quot;</span> <span class="p">|</span>
                \<span class="k">setlocal</span> <span class="nb">omnifunc</span><span class="p">=</span>syntaxcomplete#Complete <span class="p">|</span>
                \<span class="k">endif</span>
<span class="k">endif</span>
<span class="k">hi</span> Pmenu  guifg<span class="p">=</span><span class="mh">#000000</span> guibg<span class="p">=</span>#F8F8F8 ctermfg<span class="p">=</span>black ctermbg<span class="p">=</span>Lightgray
<span class="k">hi</span> PmenuSbar  guifg<span class="p">=</span>#<span class="m">8</span>A<span class="m">95</span>A<span class="m">7</span> guibg<span class="p">=</span>#F8F8F8 <span class="k">gui</span><span class="p">=</span><span class="nb">NONE</span> ctermfg<span class="p">=</span>darkcyan ctermbg<span class="p">=</span>lightgray cterm<span class="p">=</span><span class="nb">NONE</span>
<span class="k">hi</span> PmenuThumb  guifg<span class="p">=</span>#F8F8F8 guibg<span class="p">=</span>#<span class="m">8</span>A<span class="m">95</span>A<span class="m">7</span> <span class="k">gui</span><span class="p">=</span><span class="nb">NONE</span> ctermfg<span class="p">=</span>lightgray ctermbg<span class="p">=</span>darkcyan cterm<span class="p">=</span><span class="nb">NONE</span>
<span class="k">set</span> <span class="nb">completeopt</span><span class="p">=</span>menu<span class="p">,</span>preview<span class="p">,</span>longest

autocmd Filetype <span class="k">c</span>      <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>ccomplete#Complete
autocmd Filetype xml    <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>xmlcomplete#CompleteTags
autocmd <span class="nb">FileType</span> html <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>htmlcomplete#CompleteTags
autocmd <span class="nb">FileType</span> css <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>csscomplete#CompleteCSS
autocmd <span class="nb">FileType</span> javascript <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>javascriptcomplete#CompleteJS
autocmd Filetype tex    <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>syntaxcomplete#Complete&quot;
autocmd <span class="nb">FileType</span> python <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>pythoncomplete#Complete
autocmd <span class="nb">FileType</span> php <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>phpcomplete#CompletePHP
autocmd <span class="nb">FileType</span> <span class="k">ruby</span><span class="p">,</span>eruby <span class="k">set</span> <span class="nb">omnifunc</span><span class="p">=</span>rubycomplete#Complete
autocmd <span class="nb">FileType</span> <span class="k">ruby</span><span class="p">,</span>eruby <span class="k">let</span> <span class="k">g</span>:rubycomplete_buffer_loading <span class="p">=</span> <span class="m">1</span>
autocmd <span class="nb">FileType</span> <span class="k">ruby</span><span class="p">,</span>eruby <span class="k">let</span> <span class="k">g</span>:rubycomplete_rails <span class="p">=</span> <span class="m">1</span>
autocmd <span class="nb">FileType</span> <span class="k">ruby</span><span class="p">,</span>eruby <span class="k">let</span> <span class="k">g</span>:rubycomplete_classes_in_global <span class="p">=</span> <span class="m">1</span>
<span class="c">&quot;}</span>

<span class="c">&quot; neocomplcache {</span>
<span class="c">&quot; Disable AutoComplPop.</span>
<span class="k">let</span> <span class="k">g</span>:acp_enableAtStartup <span class="p">=</span> <span class="m">0</span>
<span class="c">&quot; Use neocomplcache.</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_enable_at_startup <span class="p">=</span> <span class="m">1</span>
<span class="c">&quot; Use smartcase.</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_enable_smart_case <span class="p">=</span> <span class="m">1</span>
<span class="c">&quot; Use camel case completion.</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_enable_camel_case_completion <span class="p">=</span> <span class="m">1</span>
<span class="c">&quot; Use underbar completion.</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_enable_underbar_completion <span class="p">=</span> <span class="m">1</span>
<span class="c">&quot; Set minimum syntax keyword length.</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_min_syntax_length <span class="p">=</span> <span class="m">3</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_lock_buffer_name_pattern <span class="p">=</span> <span class="s1">&#39;\*ku\*&#39;</span>

<span class="c">&quot; Define dictionary.</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_dictionary_filetype_lists <span class="p">=</span> {
            \ <span class="s1">&#39;default&#39;</span> : <span class="s1">&#39;&#39;</span><span class="p">,</span>
            \ <span class="s1">&#39;vimshell&#39;</span> : $HOME.<span class="s1">&#39;/.vimshell_hist&#39;</span><span class="p">,</span>
            \ <span class="s1">&#39;scheme&#39;</span> : $HOME.<span class="s1">&#39;/.gosh_completions&#39;</span>
            \ }

<span class="c">&quot; Define keyword.</span>
<span class="k">if</span> <span class="p">!</span>exists<span class="p">(</span><span class="s1">&#39;g:neocomplcache_keyword_patterns&#39;</span><span class="p">)</span>
    <span class="k">let</span> <span class="k">g</span>:neocomplcache_keyword_patterns <span class="p">=</span> {}
<span class="k">endif</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_keyword_patterns[<span class="s1">&#39;default&#39;</span>] <span class="p">=</span> <span class="s1">&#39;\h\w*&#39;</span>

<span class="c">&quot; Plugin key-mappings.</span>
imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">k</span><span class="p">&gt;</span>     <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>neocomplcache_snippets_expand<span class="p">)</span>
<span class="k">smap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">k</span><span class="p">&gt;</span>     <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>neocomplcache_snippets_expand<span class="p">)</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">g</span><span class="p">&gt;</span>     neocomplcache#undo_completion<span class="p">()</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">l</span><span class="p">&gt;</span>     neocomplcache#complete_common_string<span class="p">()</span>

<span class="c">&quot; SuperTab like snippets behavior.</span>
<span class="c">&quot;imap &lt;expr&gt;&lt;TAB&gt; neocomplcache#sources#snippets_complete#expandable() ? &quot;\&lt;Plug&gt;(neocomplcache_snippets_expand)&quot; : pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;TAB&gt;&quot;</span>

<span class="c">&quot; Recommended key-mappings.</span>
<span class="c">&quot; &lt;CR&gt;: close popup and save indent.</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>CR<span class="p">&gt;</span>  neocomplcache#smart_close_popup<span class="p">()</span> . <span class="s2">&quot;\&lt;CR&gt;&quot;</span>
<span class="c">&quot; &lt;TAB&gt;: completion.</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>TAB<span class="p">&gt;</span>  pumvisible<span class="p">()</span> ? <span class="s2">&quot;\&lt;C-n&gt;&quot;</span> : <span class="s2">&quot;\&lt;TAB&gt;&quot;</span>
<span class="c">&quot; &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char.</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">h</span><span class="p">&gt;</span> neocomplcache#smart_close_popup<span class="p">()</span>.<span class="s2">&quot;\&lt;C-h&gt;&quot;</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>BS<span class="p">&gt;</span> neocomplcache#smart_close_popup<span class="p">()</span>.<span class="s2">&quot;\&lt;C-h&gt;&quot;</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">y</span><span class="p">&gt;</span>  neocomplcache#close_popup<span class="p">()</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">e</span><span class="p">&gt;</span>  neocomplcache#cancel_popup<span class="p">()</span>

<span class="c">&quot; AutoComplPop like behavior.</span>
<span class="c">&quot;let g:neocomplcache_enable_auto_select = 1</span>

<span class="c">&quot; Shell like behavior(not recommended).</span>
<span class="c">&quot;set completeopt+=longest</span>
<span class="c">&quot;let g:neocomplcache_enable_auto_select = 1</span>
<span class="c">&quot;let g:neocomplcache_disable_auto_complete = 1</span>
<span class="c">&quot;inoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\&lt;Down&gt;&quot; : &quot;\&lt;TAB&gt;&quot;</span>
<span class="c">&quot;inoremap &lt;expr&gt;&lt;CR&gt;  neocomplcache#smart_close_popup() . &quot;\&lt;CR&gt;&quot;</span>

<span class="c">&quot; Enable omni completion.</span>
autocmd <span class="nb">FileType</span> css <span class="k">setlocal</span> <span class="nb">omnifunc</span><span class="p">=</span>csscomplete#CompleteCSS
autocmd <span class="nb">FileType</span> html<span class="p">,</span>markdown <span class="k">setlocal</span> <span class="nb">omnifunc</span><span class="p">=</span>htmlcomplete#CompleteTags
autocmd <span class="nb">FileType</span> javascript <span class="k">setlocal</span> <span class="nb">omnifunc</span><span class="p">=</span>javascriptcomplete#CompleteJS
autocmd <span class="nb">FileType</span> python <span class="k">setlocal</span> <span class="nb">omnifunc</span><span class="p">=</span>pythoncomplete#Complete
autocmd <span class="nb">FileType</span> xml <span class="k">setlocal</span> <span class="nb">omnifunc</span><span class="p">=</span>xmlcomplete#CompleteTags

<span class="c">&quot; Enable heavy omni completion.</span>
<span class="k">if</span> <span class="p">!</span>exists<span class="p">(</span><span class="s1">&#39;g:neocomplcache_omni_patterns&#39;</span><span class="p">)</span>
    <span class="k">let</span> <span class="k">g</span>:neocomplcache_omni_patterns <span class="p">=</span> {}
<span class="k">endif</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_omni_patterns.<span class="k">ruby</span> <span class="p">=</span> <span class="s1">&#39;[^. *\t]\.\w*\|\h\w*::&#39;</span>
<span class="c">&quot;autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_omni_patterns.php <span class="p">=</span> <span class="s1">&#39;[^. \t]-&gt;\h\w*\|\h\w*::&#39;</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_omni_patterns.<span class="k">c</span> <span class="p">=</span> <span class="s1">&#39;\%(\.\|-&gt;\)\h\w*&#39;</span>
<span class="k">let</span> <span class="k">g</span>:neocomplcache_omni_patterns.cpp <span class="p">=</span> <span class="s1">&#39;\h\w*\%(\.\|-&gt;\)\h\w*\|\h\w*::&#39;</span>
<span class="c">&quot; }</span>

<span class="c">&quot; ctrlp {</span>
<span class="k">let</span> <span class="k">g</span>:ctrlp_working_path_mode <span class="p">=</span> <span class="m">2</span>
<span class="k">let</span> <span class="k">g</span>:ctrlp_switch_buffer <span class="p">=</span> <span class="m">2</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">r</span><span class="p">&gt;</span> :CtrlPMRU<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">b</span> :CtrlPBuffer<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="k">let</span> <span class="k">g</span>:ctrlp_custom_ignore <span class="p">=</span> {
            \ <span class="s1">&#39;dir&#39;</span>:  <span class="s1">&#39;\.git$\|\.hg$\|\.svn$&#39;</span><span class="p">,</span>
            \ <span class="s1">&#39;file&#39;</span>: <span class="s1">&#39;\.exe$\|\.so$\|\.dll$&#39;</span> }
<span class="c">&quot;}</span>

<span class="c">&quot; ColorHighlight {</span>
<span class="k">let</span> <span class="k">g</span>:colorizer_auto_color <span class="p">=</span> <span class="m">1</span>
<span class="k">let</span> <span class="k">g</span>:colorizer_auto_filetype<span class="p">=</span><span class="s1">&#39;css,html&#39;</span>
<span class="c">&quot; }</span>

<span class="c">&quot; GUI for MACVim {</span>
<span class="k">if</span> has<span class="p">(</span><span class="s2">&quot;gui_running&quot;</span><span class="p">)</span>
    <span class="k">set</span> <span class="k">go</span><span class="p">=</span>aAce              <span class="c">&quot; 去掉难看的工具栏和滑动条</span>
<span class="c">    &quot;set transparency=30      &quot; 透明背景</span>
    <span class="k">set</span> <span class="nb">guifont</span><span class="p">=</span>Monaco:h13   <span class="c">&quot; 设置默认字体为monaco</span>
    <span class="k">set</span> <span class="nb">showtabline</span><span class="p">=</span><span class="m">2</span>        <span class="c">&quot; 开启自带的tab栏</span>
    <span class="k">set</span> <span class="nb">columns</span><span class="p">=</span><span class="m">140</span>          <span class="c">&quot; 设置宽</span>
    <span class="k">set</span> <span class="nb">lines</span><span class="p">=</span><span class="m">40</span>             <span class="c">&quot; 设置长</span>
    <span class="nb">noremap</span> <span class="p">&lt;</span>D<span class="p">-</span>M<span class="p">-</span>Left<span class="p">&gt;</span> :<span class="k">tabprevious</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
    <span class="nb">noremap</span> <span class="p">&lt;</span>D<span class="p">-</span>M<span class="p">-</span>Right<span class="p">&gt;</span> :tabnext<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
    map <span class="p">&lt;</span>D<span class="m">-1</span><span class="p">&gt;</span> <span class="m">1</span>gt
    map <span class="p">&lt;</span>D<span class="m">-2</span><span class="p">&gt;</span> <span class="m">2</span>gt
    map <span class="p">&lt;</span>D<span class="m">-3</span><span class="p">&gt;</span> <span class="m">3</span>gt
    map <span class="p">&lt;</span>D<span class="m">-4</span><span class="p">&gt;</span> <span class="m">4</span>gt
    map <span class="p">&lt;</span>D<span class="m">-5</span><span class="p">&gt;</span> <span class="m">5</span>gt
    map <span class="p">&lt;</span>D<span class="m">-6</span><span class="p">&gt;</span> <span class="m">6</span>gt
    map <span class="p">&lt;</span>D<span class="m">-7</span><span class="p">&gt;</span> <span class="m">7</span>gt
    map <span class="p">&lt;</span>D<span class="m">-8</span><span class="p">&gt;</span> <span class="m">8</span>gt
    map <span class="p">&lt;</span>D<span class="m">-9</span><span class="p">&gt;</span> <span class="m">9</span>gt
    map <span class="p">&lt;</span>D<span class="m">-0</span><span class="p">&gt;</span> :<span class="k">tablast</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="k">endif</span>
<span class="c">&quot;}</span>
</code></pre></div>
<p>参见我的<a href="https://github.com/lihuazhang/vim">vim</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/xiao-qing-xin-outlookshi-yong-ji</id>
    <title><![CDATA[小清新-outlook试用记]]></title>
    <updated>2012-08-01T21:05:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/xiao-qing-xin-outlookshi-yong-ji.html" />
    <content type="html"><![CDATA[<p>我不得不说，outlook 不错。Metro 风格像清新的风让人觉得惬意。目前 outlook 提供从 hotmail 升级和注册新用户两种方式。</p>

<p>登入<a href="http://www.hotmail.com">Hotmail</a>，</p>

<p><img src="/photos/hotmail.png"></img></p>

<p>点击<strong>了解详情</strong>， 进入<strong>Outlook 预览</strong>页面</p>

<p><img src="/photos/outlookpreview.png"></img></p>

<p>点击<strong>试用 Outlook</strong>进入注册页面，在这个页面你可以试用原先的 hotmail 邮箱，也可以注册一个新的 outlook 的邮箱。</p>

<p><img src="/photos/register.png"></img></p>

<p>我将我的 hotmail 升级了一把。然后登陆 outlook， 登陆之后的界面：</p>

<p><img src="/photos/main.png"></img></p>

<p>很棒吧！ 干净清爽！</p>

<p>用半小时粗略的试用了 outlook 的各种功能。为之倾倒，不吝言辞，我来说几句。</p>

<!-- more -->

<h2>UI</h2>

<p>作为外貌协会资深会员，首先就要看<strong>界面</strong>。一款应用，无论是app，还是web，如果界面不够美观，势必就已经输了一程。
斗胆说未来的世界只剩下三种界面:</p>

<ul>
<li>iOS</li>
<li>Android</li>
<li>Metro</li>
</ul>

<p>苹果就不用说了，几乎全线产品都快统一了。 而微软在 win8 和 wPhone8 上的努力， 也让人看到了
Metro 统一微软全线产品的希望（据我所知，目前 xbox360 ，Zune Player 都已经采用 Metro 界面了）。
目前也只有 Android 还在碎片化中苦苦挣扎， 各种 UI 百花齐放。如果 linux 可以 android 化，也许 linux 也能成就大事业。</p>

<p>这次 Outlook 采用 Metro 风格，不难看出微软将 Metro 进行到底的决心。而 Outlook 的 Metro 化也让我看到了未来 Win8 大概一定对 Outlook 有着
Seamless 的集成, 拭目以待。</p>

<p>话说回来， Metro 不就是为了更好的支持移动平台，<code>专为触摸而设计</code>。 我尝试在 iPad 上登陆了 Outlook， 不过似乎微软专门做了一个 Mobile 版本的，
令人遗憾， 没有专为触摸而设计。</p>

<p>
![](/photos/color.png)
Outlook 整体抛弃 hotmail 经典样式，
界面比 Hotmail 更加简洁明快，其去掉了 Hotmail 时代繁复的联系人、日历和 SkyDrive （微软的云服务产品）的选项按钮。
所有按钮都做了重新设计。 界面使用浅色调，并有12种浅暖色供用户选择。相比 Gmail 的主题略显单薄，但总的来说清新宜人。
</p>

<h2>功能</h2>

<p>作为一个 Email 服务， 基本的邮件功能是必须的。不过很可惜， 没有和 Gmail 的 label 。
按照小楠同学的说法，没有 label 怎么能算 Email。其他的功能也没有什么特别， 基本和 Gmail 差不多，
不过发邮件的界面令我惊喜， ！没办法，我是外貌协会。</p>

<p><img src="/photos/send.png" alt=""></p>

<h1>我的看法</h1>

<p>毫无疑问，这次 Outlook 的登台， 宣布了 hotmail 的死亡， 同时也是在社交网络时代落后的微软向社交网络迈出的重要一步， 也是吹响了向 Google 进攻的
号角。 Gmail 应该开始担忧它的地位了。</p>

<p>想想看吧，我们马上就有第二种选择了， 特别是墙内的朋友们，我们的微软在国内混的可比谷歌好多了。
<table>
<tr>
<td>邮件</td>
<td> </td>
<td>Gmail</td>
<td> </td>
<td>Outlook</td>
</tr>
<tr>
<td>社交</td>
<td> </td>
<td>Google+</td>
<td> </td>
<td>还没有。。</td>
</tr>
<tr>
<td>IM</td>
<td> </td>
<td>Gtalk</td>
<td> </td>
<td>Skype/MSN</td>
</tr>
<tr>
<td>云存储</td>
<td> </td>
<td>Google Driver</td>
<td> </td>
<td>SkyDriver</td>
</tr>
<tr>
<td>办公</td>
<td> </td>
<td>Goolge Document</td>
<td> </td>
<td>Office</td>
</tr>
 </table></p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/webdriver-4-jia-shang-xie-zi</id>
    <title><![CDATA[WebDriver 4: 加上叶子]]></title>
    <updated>2012-04-25T20:52:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/webdriver-4-jia-shang-xie-zi.html" />
    <content type="html"><![CDATA[<p>在前三篇WebDriver文章里，我们基本上有了一个Maven WebDriver Junit4的框架主干，这些还远远不够。
所以我们要添些叶子。</p>

<ul>
<li>要有资源配置文件</li>
<li>要有WebDriver的封装</li>
<li>要有业务对象的抽象，比如用户</li>
<li>要有自定义的异常</li>
</ul>

<p>我们大概期望有这样的文件架构：</p>
<div class="highlight"><pre><code class="text">.
├── main
│   ├── java
│   │   └── com.ahchoo.automation.exception
│   │   └── com.ahchoo.automation.model
│   │   └── com.ahchoo.automation.page
│   │   └── com.ahchoo.automation.utils
│   └── resources
└── test
    ├── java
    │   └── com.ahchoo.automation.testcase
    └── resources
</code></pre></div>
<hr>

<h3>配置文件</h3>

<p>Maven 有自己的资源文件管理策略，我们只需要修改之前的pom.xml</p>
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;resources&gt;</span>
            <span class="nt">&lt;resource&gt;</span>
                <span class="nt">&lt;directory&gt;</span>src/main/resources<span class="nt">&lt;/directory&gt;</span>
            <span class="nt">&lt;/resource&gt;</span>
        <span class="nt">&lt;/resources&gt;</span>
        <span class="nt">&lt;testResources&gt;</span>
            <span class="nt">&lt;testResource&gt;</span>
                <span class="nt">&lt;directory&gt;</span>src/test/resources<span class="nt">&lt;/directory&gt;</span>
            <span class="nt">&lt;/testResource&gt;</span>
        <span class="nt">&lt;/testResources&gt;</span>
    <span class="nt">&lt;/build&gt;</span> 
    ...
<span class="nt">&lt;/project&gt;</span>
</code></pre></div>
<p>我们指定了两个资源文件目录，然后将config.xml放在这些目录之下。
<em>注意，src/main/resouces下的文件只能在运行main里面的代码的时候才会用到，同样的src/test/resources下的配置文件只有在运行测试的时候才会加载。</em></p>

<p>可以将<strong>浏览器类型, 远程服务器地址, 应用URL之类</strong>放到config.xml中去。</p>
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;config</span> <span class="na">id=</span><span class="s">&quot;config&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;BaseUrl&gt;</span>http://www.baidu.com<span class="nt">&lt;/BaseUrl&gt;</span>
    <span class="nt">&lt;Browser&gt;</span>
        <span class="nt">&lt;type&gt;</span>Firefox10<span class="nt">&lt;/type&gt;</span>
        <span class="nt">&lt;location&gt;</span>pathToBrowser<span class="nt">&lt;/location&gt;</span>
        <span class="nt">&lt;remote&gt;</span>192.168.1.248<span class="nt">&lt;/remote&gt;</span>
    <span class="nt">&lt;/Browser&gt;</span>
    <span class="nt">&lt;user</span> <span class="na">name=</span><span class="s">&quot;xxx&quot;</span> <span class="na">password=</span><span class="s">&quot;xxx&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/config&gt;</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/sauce-ondemandshi-yong</id>
    <title><![CDATA[Sauce OnDemand试用]]></title>
    <updated>2012-04-24T21:37:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/sauce-ondemandshi-yong.html" />
    <content type="html"><![CDATA[<p>闲着无聊，试用了下<a href="https://saucelabs.com">saucelabs</a>。
先注册用户，这个略过不说。</p>

<p>saucelabs有两种方式:</p>

<ol>
<li><p>Sauce Scout</p>

<p>通过访问架在云端的浏览器(cloud-hosted browsers)执行测试用例。相当于saucelabs给用户提供了多种多样组合的虚拟机，只不过这个虚拟机就只有一个浏览器。如图：
<img src="/photos/soucescout.png" alt="sourcescout" title="soucescout"></p>

<p>Saucelabs提供了许多方案，对于那些没有空间部署环境的公司，这个服务的确很贴心。</p></li>
<li><p>Sauce OnDemand</p>

<p>Sauce OnDemand就是所谓的自动化了。我们利用WebDriver或者Selenium RC的remote server来指定SauceLabs提供的浏览器配置，进行各种自动化测试。</p></li>
</ol>

<p>那我们开始试用Sauce OnDemand，英语好的攻城狮们请直接移步<a href="https://saucelabs.com/docs/ondemand/getting-started/env/ruby/se2/linux">Get Started</a></p>

<p>为了方便起见，我就用ruby。首先确保你安装了<code>selenium-webdriver</code>，如果没有安装，在终端用以下命令安装：
<code>
    gem install selenium-webdriver
</code></p>

<p>输入以下代码：注意: 代码中的:url请替换成你自己的，不过我不知道这个url到底是哪里来的，
我是从get started里面的例子里找到的。</p>
<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
<span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
<span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>

<span class="k">class</span> <span class="nc">ExampleTest</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
    <span class="k">def</span> <span class="nf">setup</span>
        <span class="n">caps</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Remote</span><span class="p">:</span><span class="ss">:Capabilities</span><span class="o">.</span><span class="n">firefox</span>
        <span class="n">caps</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="s2">&quot;5&quot;</span>
        <span class="n">caps</span><span class="o">.</span><span class="n">platform</span> <span class="o">=</span> <span class="ss">:XP</span>
        <span class="n">caps</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Testing Selenium 2 with Ruby on Sauce&quot;</span>

        <span class="vi">@driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span><span class="p">(</span>
          <span class="ss">:remote</span><span class="p">,</span>
          <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://lihuazhang:ba444e83-206c-4a9c-b008-4da920d7f852@ondemand.saucelabs.com:80/wd/hub&quot;</span><span class="p">,</span>
          <span class="ss">:desired_capabilities</span> <span class="o">=&gt;</span> <span class="n">caps</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">test_sauce</span>
        <span class="vi">@driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">to</span> <span class="s2">&quot;http://saucelabs.com/test/guinea-pig&quot;</span>
        <span class="n">assert</span> <span class="vi">@driver</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;I am a page title - Sauce Labs&quot;</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">teardown</span>
        <span class="vi">@driver</span><span class="o">.</span><span class="n">quit</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>运行<code>ruby basic-example.rb</code></p>
<div class="highlight"><pre><code class="text">Run options: 

# Running tests:

.

Finished tests in 44.647462s, 0.0224 tests/s, 0.0224 assertions/s.

1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</code></pre></div>
<p>可以看到运行成功，我们再去sauce的<a href="https://saucelabs.com/account">Account</a>页面里去看下运行的结果。</p>

<p><img src="/photos/souceaccount.png" alt="account"></p>

<p>可以看到页面里有video和log下载，打开log我们可以看到运行的录像，而log就记录了运行的信息。
此外，我们更可以点开测试用例，查看更多的细节。</p>

<p>但是一般我们测试环境都是内网，为了满足这个条件，Saucelabs提供一条通道叫Sauce Connect。</p>

<blockquote>
<p>Sauce Connect creates a secure and reliable tunnel from our cloud to your private network that can only be accessed by you. This eliminates the need to whitelist IPs, open any ports on your firewall or go through any changes in your tests.
Sauce Connect is not only for accessing private servers. If you want all of your test traffic to be secure and reliable, even the Selenium instructions you send to Sauce, you can use Sauce Connect for that too!</p>
</blockquote>

<h2>Get Started:</h2>

<p>1.先下载<a href="https://saucelabs.com/downloads/Sauce-Connect-latest.zip">Sauce Connect</a></p>

<p>2.解压然后运行<code>java -jar Sauce-Connect.jar lihuazhang ba444e83-206c-4a9c-b008-4da920d7f852</code></p>

<ol>
<li>确定tunnel start以后，接下去你就可以运行你的测试用例了。</li>
</ol>

<p>我们再来看下刚刚那个测试用例，让程序navigate.to到本地。</p>
<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
<span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
<span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>

<span class="k">class</span> <span class="nc">ExampleTest</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
    <span class="k">def</span> <span class="nf">setup</span>
        <span class="n">caps</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Remote</span><span class="p">:</span><span class="ss">:Capabilities</span><span class="o">.</span><span class="n">firefox</span>
        <span class="n">caps</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="s2">&quot;5&quot;</span>
        <span class="n">caps</span><span class="o">.</span><span class="n">platform</span> <span class="o">=</span> <span class="ss">:XP</span>
        <span class="n">caps</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Testing Selenium 2 with Ruby on Sauce&quot;</span>

        <span class="vi">@driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span><span class="p">(</span>
          <span class="ss">:remote</span><span class="p">,</span>
          <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://lihuazhang:ba444e83-206c-4a9c-b008-4da920d7f852@ondemand.saucelabs.com:80/wd/hub&quot;</span><span class="p">,</span>
          <span class="ss">:desired_capabilities</span> <span class="o">=&gt;</span> <span class="n">caps</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">test_sauce</span>
        <span class="vi">@driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">to</span> <span class="s2">&quot;http://localhost:3000&quot;</span> <span class="c1"># Set a local env.</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">teardown</span>
        <span class="vi">@driver</span><span class="o">.</span><span class="n">quit</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>再运行一遍，必然成功啊~</p>

<p>我们看下Sauce-Connect.jar的日志，可以看到这个tunnel起到了一个中转的作用。</p>
<div class="highlight"><pre><code class="text">2012-04-25 00:04:01,184 - connection to Sauce Connect server closed
2012-04-25 00:04:01,927 - old keepalive timer shutting down
2012-04-25 00:04:03,923 - Successful handshake with Sauce Connect server
2012-04-25 00:04:03,927 - resending 2 packets
2012-04-25 00:04:04,078 - Tunnel host version: 0.1.0, remote endpoint ID: 73b1e202231b41a3802aab8785caf15f
2012-04-25 00:05:19,002 - relative URL, constructing absolute from Host header
2012-04-25 00:05:19,003 - using constructed absolute URL: http://localhost:3000/
2012-04-25 00:05:19,007 - Could not proxy /, exception: java.net.ConnectException: Connection refused
2012-04-25 00:05:22,145 - relative URL, constructing absolute from Host header
2012-04-25 00:05:22,147 - using constructed absolute URL: http://localhost:3000/favicon.ico
2012-04-25 00:05:22,148 - Could not proxy /favicon.ico, exception: java.net.ConnectException: Connection refused
2012-04-25 00:05:22,589 - relative URL, constructing absolute from Host header
2012-04-25 00:05:22,592 - using constructed absolute URL: http://localhost:3000/favicon.ico
2012-04-25 00:05:22,594 - Could not proxy /favicon.ico, exception: java.net.ConnectException: Connection refused
2012-04-25 00:05:23,391 - GET http://feeds.bbci.co.uk/news/rss.xml?edition=int -&gt; 200 (2847ms)
2012-04-25 00:05:53,084 - disconnected from Sauce Connect server
2012-04-25 00:05:53,085 - connection to Sauce Connect server closed
</code></pre></div>
<p>同样的，我们可以在Account里面看到这个测试用例的运行细节，如图：</p>

<p><img src="/photos/sauce_detail1.png" alt="detail"></p>

<p><img src="/photos/sauce_detail2.png" alt="detail"></p>

<p>不错吧，有兴趣，自己动手试试。</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/mysql5-qing-kong-rootmi-ma</id>
    <title><![CDATA[mysql5 清空root密码]]></title>
    <updated>2012-04-23T21:27:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/mysql5-qing-kong-rootmi-ma.html" />
    <content type="html"><![CDATA[<p>最近在windows用mysql，在root上设置了密码，很不方便，于是就想去清空它，网上找了下教程，总结了下。肯定好用。</p>

<ul>
<li><p>停止MySQL的服务。 </p></li>
<li><p>用mysqld.exe --skip-grant-tables &amp; (会占用一个dos控制台窗口)</p></li>
<li><p>重新打开一个dos控制台窗口，进入mysql </p></li>
</ul>
<div class="highlight"><pre><code class="bash">mysql -uroot
use mysql
update user <span class="nb">set </span><span class="nv">password</span><span class="o">=</span>password<span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">)</span> where <span class="nv">user</span><span class="o">=</span><span class="s1">&#39;root&#39;</span>;
flush privileges；
</code></pre></div>
<ul>
<li><p>关闭MySQL的控制台窗口，用正常模式启动Mysql </p></li>
<li><p>你可以用新的密码链接到Mysql了。 </p></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/webdriver-3-more-pageobjects</id>
    <title><![CDATA[WebDriver 3: more PageObjects - PageFactory]]></title>
    <updated>2012-04-21T10:36:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/webdriver-3-more-pageobjects.html" />
    <content type="html"><![CDATA[<p>在上篇中，大致介绍了PageObjects。其实为了对PageObjects更好的支持，webdriver中还有一个
<a href="http://code.google.com/p/selenium/wiki/PageFactory">PageFactory</a>的概念。</p>

<blockquote>
<p>There is a PageFactory in the support package that provides support for this pattern, and helps to remove some boiler-plate code from your Page Objects at the same time.</p>
</blockquote>

<p>来看下,上篇中的百度搜索例子, 用PageFactory该如何实现。</p>

<ul>
<li>首先修改BaiduIndexPage</li>
</ul>
<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">.</span><span class="na">page</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.FindBy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.How</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaiduIndexPage</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://www.baidu.com&quot;</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BaiduIndexPage</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">driver</span> <span class="o">=</span> <span class="n">driver</span><span class="o">;</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@FindBy</span><span class="o">(</span><span class="n">how</span> <span class="o">=</span> <span class="n">How</span><span class="o">.</span><span class="na">ID</span><span class="o">,</span> <span class="n">using</span> <span class="o">=</span> <span class="s">&quot;kw&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">WebElement</span> <span class="n">searchField</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">SearchResultPage</span> <span class="nf">searchFor</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// We continue using the element just as before</span>
        <span class="n">searchField</span><span class="o">.</span><span class="na">sendKeys</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
        <span class="n">searchField</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">SearchResultPage</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>可以看到这里使用了注释@FindBy， 这是一个注释类，我们来看下它的定义</p>
<div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">FindBy</span> <span class="o">{</span>
  <span class="n">How</span> <span class="nf">how</span><span class="o">()</span> <span class="k">default</span> <span class="n">How</span><span class="o">.</span><span class="na">ID</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">using</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">id</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">className</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">css</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">tagName</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">linkText</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">partialLinkText</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>

  <span class="n">String</span> <span class="nf">xpath</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>
<p>我们可以知道其实FindBy注释就是实现了<code>driver.findElement(By)</code>,用FindBy可以从无数findElement方法中解脱出来(如果你页面有很多元素的时候)。</p>

<ul>
<li>然后要用工厂模式生成BaiduIndexPage对象</li>
</ul>

<p>在SearchTest.java 里
<code>java
    BaiduIndexPage home = PageFactory.initElements(driver, BaiduIndexPage.class);
    // BaiduIndexPage home = new BaiduIndexPage(driver);
</code>
将WebDriver实例和BaiduIndexPage.class传给initElements方法，该方法会更具反射生成BaiduIndexPage实例，必须注意的是，使用PageFactory，我们的页面对象必须有
一个带有WebDriver类型参数的构造方法。</p>

<blockquote>
<p>This method will attempt to instantiate the class given to it, preferably using a constructor
which takes a WebDriver instance as its only argument or falling back on a no-arg constructor.</p>
</blockquote>

<p>PageFactory基本需要关注的就是：
    1. Findby注释
    2. PageFactory.initElements</p>

<p>我们继续改造，</p>
<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">.</span><span class="na">page</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.FindBy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.How</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.PageFactory</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaiduIndexPage</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://www.baidu.com&quot;</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BaiduIndexPage</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">driver</span> <span class="o">=</span> <span class="n">driver</span><span class="o">;</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
        <span class="n">PageFactory</span><span class="o">.</span><span class="na">initElements</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@FindBy</span><span class="o">(</span><span class="n">how</span> <span class="o">=</span> <span class="n">How</span><span class="o">.</span><span class="na">ID</span><span class="o">,</span> <span class="n">using</span> <span class="o">=</span> <span class="s">&quot;kw&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">WebElement</span> <span class="n">searchField</span><span class="o">;</span>

    <span class="nd">@FindBy</span><span class="o">(</span><span class="n">how</span> <span class="o">=</span> <span class="n">How</span><span class="o">.</span><span class="na">ID</span><span class="o">,</span> <span class="n">using</span> <span class="o">=</span> <span class="s">&quot;lg&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">WebElement</span> <span class="n">logo</span><span class="o">;</span>

    <span class="nd">@FindBy</span><span class="o">(</span><span class="n">how</span> <span class="o">=</span> <span class="n">How</span><span class="o">.</span><span class="na">CLASS_NAME</span><span class="o">,</span> <span class="n">using</span> <span class="o">=</span> <span class="s">&quot;s_btn&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">WebElement</span> <span class="n">baidYiXiauButton</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">SearchResultPage</span> <span class="nf">searchFor</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// We continue using the element just as before</span>
        <span class="n">searchField</span><span class="o">.</span><span class="na">sendKeys</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
        <span class="n">searchField</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">SearchResultPage</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">idLogoDisplay</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">logo</span><span class="o">.</span><span class="na">isDisplayed</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasBaidYiXiauButton</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">baidYiXiauButton</span><span class="o">.</span><span class="na">isDisplayed</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div>
<p>我们将<code>PageFactory.initElements(driver, this);</code>放在页面类的构造函数里，这样就不需要将PageFactory暴露到TestCase中去。</p>
<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">.</span><span class="na">page</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.FindBy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.How</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.PageFactory</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SearchResultPage</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>

    <span class="cm">/* 推广链接所在位置 */</span>
    <span class="nd">@FindBy</span><span class="o">(</span><span class="n">how</span><span class="o">=</span><span class="n">How</span><span class="o">.</span><span class="na">ID</span><span class="o">,</span> <span class="n">using</span><span class="o">=</span><span class="s">&quot;ec_im_container&quot;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">WebElement</span> <span class="n">adDiv</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SearchResultPage</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">driver</span> <span class="o">=</span> <span class="n">driver</span><span class="o">;</span>
        <span class="n">PageFactory</span><span class="o">.</span><span class="na">initElements</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">driver</span><span class="o">.</span><span class="na">getPageSource</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAdDivDisplayed</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">adDiv</span><span class="o">.</span><span class="na">isDisplayed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>下面是测试用例</p>
<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.After</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.PageFactory</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.ahchoo.automation.page.BaiduIndexPage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.ahchoo.automation.page.SearchResultPage</span><span class="o">;</span>

<span class="cm">/**</span>
<span class="cm"> * Unit test for simple App.</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SearchTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@After</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">searchTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">BaiduIndexPage</span> <span class="n">home</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BaiduIndexPage</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">home</span><span class="o">.</span><span class="na">hasBaidYiXiauButton</span><span class="o">());</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">home</span><span class="o">.</span><span class="na">idLogoDisplay</span><span class="o">());</span>
        <span class="n">SearchResultPage</span> <span class="n">searchResult</span> <span class="o">=</span> <span class="n">home</span><span class="o">.</span><span class="na">searchFor</span><span class="o">(</span><span class="s">&quot;pizza&quot;</span><span class="o">);</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">searchResult</span><span class="o">.</span><span class="na">isAdDivDisplayed</span><span class="o">());</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">searchResult</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;pizza&quot;</span><span class="o">));</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">searchResult</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;pizza&quot;</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>改造完毕，我可以保证这个Testcase能运行的很欢。</p>

<h6>总结</h6>

<p>可以看到使用PageFactory可以使页面类代码更加清晰，维护也相对简单许多。如果你也使用PageObjects的话，
不妨试试看。如果你想多了解PageFactory的话，请移步<a href="http://code.google.com/p/selenium/wiki/PageFactor">PageFactory</a>，
一定能让你受益匪浅。</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/webdriver2</id>
    <title><![CDATA[WebDriver 2: PageObject]]></title>
    <updated>2012-04-20T19:07:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/webdriver2.html" />
    <content type="html"><![CDATA[<p>在上篇中，已经搭建好了环境。假设我们已经有这样一个环境</p>
<div class="highlight"><pre><code class="bash">── pom.xml
── src
   ├── main
   │   └── java
   │       └── com
   │           └── ahchoo
   │               └── automation
   │                   └── App.java
   └── <span class="nb">test</span>
       └── java
           └── com
               └── ahchoo
                   └── automation
                       └── AppTest.java
</code></pre></div>
<p>在这个基础上，我们要实现一个访问百度，查询一个关键字之后，跳转到结果界面。</p>

<ul>
<li>开始之前，我们先想想传统的WebDriver代码应该怎么写？</li>
</ul>
<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>

<span class="kn">import</span> <span class="nn">org.junit.After</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.By</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SearchTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@After</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">searchTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;http://www.baidu.com&quot;</span><span class="o">);</span>
        <span class="n">WebElement</span> <span class="n">input</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">&quot;kw&quot;</span><span class="o">));</span>
        <span class="n">input</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="n">input</span><span class="o">.</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">&quot;Pizza&quot;</span><span class="o">);</span>
        <span class="n">input</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;Pizza&quot;</span><span class="o">));</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">driver</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;Pizza&quot;</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>如果只有一个测试用例，这样写也很清爽，但是如果有许许多多这样的测试用例，如果input的id发生变化了，就要把
所有的用到这个input的用例找出来，一一修改，这无疑是个大工程。</p>

<ul>
<li>让我们再来看看PageObjects，首先，我们要创建页面对象， 整个过程涉及2个页面</li>
</ul>
<div class="highlight"><pre><code class="text">1. 百度首页
2. search结果页
</code></pre></div>
<p>所以我们也就有两个pageobjects， 将pageobjects class放在main source下。</p>
<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">.</span><span class="na">page</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.openqa.selenium.By</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaiduIndexPage</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://www.baidu.com&quot;</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BaiduIndexPage</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">driver</span> <span class="o">=</span> <span class="n">driver</span><span class="o">;</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">SearchResultPage</span> <span class="nf">searchFor</span><span class="o">(</span><span class="n">String</span> <span class="n">term</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Baidu search input id is &quot;kw&quot;</span>
        <span class="n">WebElement</span> <span class="n">searchField</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">&quot;kw&quot;</span><span class="o">));</span>
        <span class="n">searchField</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="n">searchField</span><span class="o">.</span><span class="na">sendKeys</span><span class="o">(</span><span class="n">term</span><span class="o">);</span>
        <span class="n">searchField</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">SearchResultPage</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">.</span><span class="na">page</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SearchResultPage</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">SearchResultPage</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">driver</span> <span class="o">=</span> <span class="n">driver</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">driver</span><span class="o">.</span><span class="na">getPageSource</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<ul>
<li>接着创建testcase，把测试用例放在test source目录下</li>
</ul>
<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ahchoo</span><span class="o">.</span><span class="na">automation</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>

<span class="kn">import</span> <span class="nn">org.junit.After</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.ahchoo.automation.page.BaiduIndexPage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.ahchoo.automation.page.SearchResultPage</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SearchTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">WebDriver</span> <span class="n">driver</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@After</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">searchTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">BaiduIndexPage</span> <span class="n">home</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BaiduIndexPage</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
        <span class="n">SearchResultPage</span> <span class="n">searchResult</span> <span class="o">=</span> <span class="n">home</span><span class="o">.</span><span class="na">searchFor</span><span class="o">(</span><span class="s">&quot;pizza&quot;</span><span class="o">);</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">searchResult</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;pizza&quot;</span><span class="o">));</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">searchResult</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;pizza&quot;</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>然后我们运行下看看</p>
<div class="highlight"><pre><code class="text">➜  ahcoo  mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building ahcoo 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ ahcoo ---
[WARNING] Using platform encoding (EUC_CN actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /Volumes/MacBackUp/ahcoo/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ ahcoo ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ ahcoo ---
[WARNING] Using platform encoding (EUC_CN actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /Volumes/MacBackUp/ahcoo/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ ahcoo ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.7.2:test (default-test) @ ahcoo ---
[INFO] Surefire report directory: /Volumes/MacBackUp/ahcoo/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.ahchoo.automation.SearchTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 21.474 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 25.953s
[INFO] Finished at: Fri Apr 20 21:53:03 CST 2012
[INFO] Final Memory: 5M/81M
[INFO] ------------------------------------------------------------------------
</code></pre></div>
<p>Pass！</p>

<p>这就是当下流行的pageobjects，将页面固有的属性和逻辑抽象成类。然后在测试代码里面调用，这样有一个很大的好处，
如果页面变动了，只需要变动页面对象，不需要去无数测试用例里去寻找并更改。</p>

<p><blockquote>
<p>Within your web app&#39;s UI there are areas that your tests interact with. A Page Object simply models these as objects within the test code. This reduces the amount of duplicated code and means that if the UI changes, the fix need only be applied in one place.
</p>
<small>
 simon.m.stewart  <a href="http://code.google.com/p/selenium/wiki/PageObjects">PageObject</a> 
</small>
</endblockquote></p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/capybara-plus-cucumber-plus-webdriverzi-dong-hua-ce-shi-kuang-jia</id>
    <title><![CDATA[Capybara+Cucumber+WebDriver自动化测试框架]]></title>
    <updated>2012-04-19T21:13:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/capybara-plus-cucumber-plus-webdriverzi-dong-hua-ce-shi-kuang-jia.html" />
    <content type="html"><![CDATA[<p>我面试的时候，BOSS对我说，我们是要求自动化的。我想这我会啊。BOSS又说，我们也有一套自动化的框架。我想那更好。然后等我入职之后，发现毛框架也没有，只有四个完全不会代码的测试攻城狮。</p>

<p>老板说要自动化，我说自动化啊？我花了几天的时间温习了我熟悉的<code>JAVA+Junit+SeleniumRC</code>，否定了这个框架，一来语言太重，二来都不会coding。我很苦恼地向BOSS抱怨了，他说用脚本语言吧，于是我就想要不就用<code>python+pyunit+webdriver</code>，在google打工的时候，接触的就是这个框架。BOSS想了想，说用ruby吧。原因在他是ruby的超级粉丝。</p>

<p>于是我找到了<code>cucumber+capybara+webdriver</code>，这也是我第一次接触ruby，第一次接触BDD。而我选用这个框架的原因如下：
    1. cucumber有一套自己的DSL，任何会写测试用例的人都会写。
    2. 对于这套框架要学的ruby知识，学起来相对容易。
    3. 公司文化。</p>

<p>前面都是废话，下面开始进入正题。</p>

<h2>功于善其事，必先利其器</h2>

<ul>
<li>首先搭建环境，确定有ruby的环境。安装必要的gem
<code>bash
gem install cucumber 
gem install capybara
gem ins tall selenium-webdriver
</code></li>
</ul>

<p><em><a href="http://cukes.info/">Cucumber</a> <a href="https://github.com/jnicklas/capybara">Capybara</a> <a href="http://code.google.com/p/selenium/">WebDriver</a></em></p>

<ul>
<li>建立个空项目，将gem加入gemfile</li>
</ul>
<div class="highlight"><pre><code class="ruby"><span class="n">source</span> <span class="s2">&quot;http://ruby.taobao.org/&quot;</span>
<span class="n">gem</span> <span class="s1">&#39;cucumber&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.1.9&#39;</span>
<span class="n">gem</span> <span class="s2">&quot;capybara&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.1.2&quot;</span>
<span class="n">gem</span> <span class="s1">&#39;selenium-webdriver&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 2.20.0&#39;</span>
</code></pre></div>
<ul>
<li>先简单介绍一下cucumber</li>
</ul>

<p>我们在这个空项目下运行<code>cucumber</code></p>
<div class="highlight"><pre><code class="bash">zhangmatoMacBook-Pro:test lihuazhang<span class="nv">$ </span>cucumber
You don<span class="s1">&#39;t have a &#39;</span>features<span class="err">&#39;</span> directory.  Please create one to get started.
See http://cukes.info/ <span class="k">for </span>more information.
</code></pre></div>
<p>可以看出cucumber会去寻找<code>features</code>目录，先创建一个features目录。</p>
<div class="highlight"><pre><code class="bash">zhangmatoMacBook-Pro:test lihuazhang<span class="nv">$ </span>mkdir features
zhangmatoMacBook-Pro:test lihuazhang<span class="nv">$ </span>ls
features
zhangmatoMacBook-Pro:test lihuazhang<span class="nv">$ </span>cucumber
0 scenarios
0 steps
0m0.000s
</code></pre></div>
<p>因为在features下面什么都没有，所以运行结果都是零。</p>

<p>那我们创建一个feature，cucumber把feature都命名为xxx.feature, 而每个feature有多个scenario。</p>
<div class="highlight"><pre><code class="ruby"><span class="ss">Feature</span><span class="p">:</span> <span class="no">Adding</span>

    <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Add</span> <span class="n">two</span> <span class="n">numbers</span>
        <span class="no">Given</span> <span class="n">the</span> <span class="n">input</span> <span class="s2">&quot;2+2&quot;</span>
        <span class="no">When</span> <span class="n">the</span> <span class="n">calculator</span> <span class="n">is</span> <span class="n">run</span>
        <span class="no">Then</span> <span class="n">the</span> <span class="n">output</span> <span class="n">should</span> <span class="n">be</span> <span class="s2">&quot;4&quot;</span>
    <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Minus</span> <span class="n">two</span> <span class="n">numbers</span>
        <span class="no">Given</span> <span class="n">the</span> <span class="n">input</span> <span class="s2">&quot;2-1&quot;</span>
        <span class="no">When</span> <span class="n">the</span> <span class="n">calculator</span> <span class="n">is</span> <span class="n">run</span>
        <span class="no">Then</span> <span class="n">the</span> <span class="n">output</span> <span class="n">should</span> <span class="n">be</span> <span class="s2">&quot;0&quot;</span>
</code></pre></div>
<p>cucumber使用<code>Given/When/Then</code>这种叫做<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">gherkin</a>的可描述性语言(DSL)。</p>

<p>feature文件中的每个Given/When/Then步骤在Step文件中都有对应的Ruby执行代码，两类文件通过正则表达式相关联。后面马上讲到。</p>

<p>让我们再来运行一遍</p>
<div class="highlight"><pre><code class="ruby"><span class="n">zhangmatoMacBook</span><span class="o">-</span><span class="ss">Pro</span><span class="p">:</span><span class="nb">test</span> <span class="n">lihuazhang</span><span class="err">$</span> <span class="n">cucumber</span> 
<span class="ss">Feature</span><span class="p">:</span> <span class="no">Adding</span>

  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Add</span> <span class="n">two</span> <span class="n">numbers</span>       <span class="c1"># features/test.feature:3</span>
    <span class="no">Given</span> <span class="n">the</span> <span class="n">input</span> <span class="s2">&quot;2+2&quot;</span>         <span class="c1"># features/test.feature:4</span>
    <span class="no">When</span> <span class="n">the</span> <span class="n">calculator</span> <span class="n">is</span> <span class="n">run</span>    <span class="c1"># features/test.feature:5</span>
    <span class="no">Then</span> <span class="n">the</span> <span class="n">output</span> <span class="n">should</span> <span class="n">be</span> <span class="s2">&quot;4&quot;</span> <span class="c1"># features/test.feature:6</span>

  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Minus</span> <span class="n">two</span> <span class="n">numbers</span>     <span class="c1"># features/test.feature:7</span>
    <span class="no">Given</span> <span class="n">the</span> <span class="n">input</span> <span class="s2">&quot;2-1&quot;</span>         <span class="c1"># features/test.feature:8</span>
    <span class="no">When</span> <span class="n">the</span> <span class="n">calculator</span> <span class="n">is</span> <span class="n">run</span>    <span class="c1"># features/test.feature:9</span>
    <span class="no">Then</span> <span class="n">the</span> <span class="n">output</span> <span class="n">should</span> <span class="n">be</span> <span class="s2">&quot;0&quot;</span> <span class="c1"># features/test.feature:10</span>

<span class="mi">2</span> <span class="n">scenarios</span> <span class="p">(</span><span class="mi">2</span> <span class="n">undefined</span><span class="p">)</span>
<span class="mi">6</span> <span class="n">steps</span> <span class="p">(</span><span class="mi">6</span> <span class="n">undefined</span><span class="p">)</span>
<span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mo">005</span><span class="n">s</span>

<span class="no">You</span> <span class="n">can</span> <span class="n">implement</span> <span class="n">step</span> <span class="n">definitions</span> <span class="k">for</span> <span class="n">undefined</span> <span class="n">steps</span> <span class="n">with</span> <span class="n">these</span> <span class="ss">snippets</span><span class="p">:</span>

<span class="no">Given</span> <span class="sr">/^the input &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
<span class="k">end</span>

<span class="no">When</span> <span class="sr">/^the calculator is run$/</span> <span class="k">do</span>
  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
<span class="k">end</span>

<span class="no">Then</span> <span class="sr">/^the output should be &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
<span class="k">end</span>

<span class="no">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">snippets</span> <span class="k">in</span> <span class="n">a</span> <span class="n">different</span> <span class="n">programming</span> <span class="n">language</span><span class="p">,</span>
<span class="n">just</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">a</span> <span class="n">file</span> <span class="n">with</span> <span class="n">the</span> <span class="n">appropriate</span> <span class="n">file</span> <span class="n">extension</span>
<span class="n">exists</span> <span class="n">where</span> <span class="n">cucumber</span> <span class="n">looks</span> <span class="k">for</span> <span class="n">step</span> <span class="n">definitions</span><span class="o">.</span>
</code></pre></div>
<p>可以看到我们运行了2个scenarios,6个steps，都没有定义，于是cucumber仁慈的告诉了我们如何实现。于是我们就要开始写step了。</p>
<div class="highlight"><pre><code class="ruby"><span class="c1">#小小作弊下，就不写的漂亮了。</span>
<span class="no">Given</span> <span class="sr">/^the input &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">statement</span><span class="o">|</span>
    <span class="vi">@answer</span> <span class="o">=</span> <span class="nb">eval</span> <span class="n">statement</span>
<span class="k">end</span>

<span class="no">When</span> <span class="sr">/^the calculator is run$/</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;Run~&quot;</span>
<span class="k">end</span>

<span class="no">Then</span> <span class="sr">/^the output should be &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">answer</span><span class="o">|</span>
    <span class="vi">@answer</span> <span class="o">==</span> <span class="n">answer</span>
<span class="k">end</span>
</code></pre></div>
<p>我们再来运行一遍</p>
<div class="highlight"><pre><code class="ruby"><span class="n">zhangmatoMacBook</span><span class="o">-</span><span class="ss">Pro</span><span class="p">:</span><span class="nb">test</span> <span class="n">lihuazhang</span><span class="err">$</span> <span class="n">cucumber</span> 
<span class="ss">Feature</span><span class="p">:</span> <span class="no">Adding</span>

  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Add</span> <span class="n">two</span> <span class="n">numbers</span>       <span class="c1"># features/test.feature:3</span>
    <span class="no">Given</span> <span class="n">the</span> <span class="n">input</span> <span class="s2">&quot;2+2&quot;</span>         <span class="c1"># features/step_definitions/test_step.rb:1</span>
    <span class="no">When</span> <span class="n">the</span> <span class="n">calculator</span> <span class="n">is</span> <span class="n">run</span>    <span class="c1"># features/step_definitions/test_step.rb:5</span>
      <span class="no">Run</span><span class="o">~</span>
    <span class="no">Then</span> <span class="n">the</span> <span class="n">output</span> <span class="n">should</span> <span class="n">be</span> <span class="s2">&quot;4&quot;</span> <span class="c1"># features/step_definitions/test_step.rb:9</span>

  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Minus</span> <span class="n">two</span> <span class="n">numbers</span>     <span class="c1"># features/test.feature:7</span>
    <span class="no">Given</span> <span class="n">the</span> <span class="n">input</span> <span class="s2">&quot;2-1&quot;</span>         <span class="c1"># features/step_definitions/test_step.rb:1</span>
    <span class="no">When</span> <span class="n">the</span> <span class="n">calculator</span> <span class="n">is</span> <span class="n">run</span>    <span class="c1"># features/step_definitions/test_step.rb:5</span>
      <span class="no">Run</span><span class="o">~</span>
    <span class="no">Then</span> <span class="n">the</span> <span class="n">output</span> <span class="n">should</span> <span class="n">be</span> <span class="s2">&quot;0&quot;</span> <span class="c1"># features/step_definitions/test_step.rb:9</span>

<span class="mi">2</span> <span class="n">scenarios</span> <span class="p">(</span><span class="mi">2</span> <span class="n">passed</span><span class="p">)</span>
<span class="mi">6</span> <span class="n">steps</span> <span class="p">(</span><span class="mi">6</span> <span class="n">passed</span><span class="p">)</span>
<span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mo">005</span><span class="n">s</span>
</code></pre></div>
<p>哇，恭喜都通过了。</p>

<p>好，关于cucumber的介绍就到这里，具体可以去看看<a href="http://www.cnblogs.com/CloudTeng/articles/2214293.html">Cucumber的目录结构和执行过程</a></p>

<ul>
<li>在简单介绍下Capybara</li>
</ul>

<p>Capybara是水豚的意思，在水豚之前有一个老鼠，叫做webrat，你如果在google上搜索<code>capybara webrat</code>的话，会发现一大推类似
<blockquote>
Cucumber: Switching from Webrat to Capybara - cakebaker
cakebaker.42dh.com/.../cucumber-switching-from... - 网页快照 - 翻译此页
19 Sep 2010 – Fortunately, there is an alternative working with both Rails versions: Capybara. And so I decided to make the switch from Webrat to Capybara.
</blockquote></p>

<p>Webrat逐渐被Capybara取代，就像selenium逐渐被webdriver取代。</p>

<p>Capybara主要是用来测试rails和Rack应用的。官网上说</p>

<blockquote>
Capybara helps you test Rails and Rack applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem.
</blockquote>

<p>我们主要用Capybara和Webdriver结合起来进行网页自动化测试。（注意：Capybara不支持selenium rc）</p>

<p>详细请见<a href="https://github.com/jnicklas/capybara">Capybara</a>,里面讲的非常详细了。</p>

<h2>小试牛刀</h2>

<p>在了解了cucumber和capybara之后，我们可以正式开始写点东西。 在空项目底下，建立类似的目录结构</p>
<div class="highlight"><pre><code class="bash">├── features
    ├── example
       ├── example.feature
       ├── step_definitions
       │   └── example_steps.rb
       └── support
           └── env.rb
</code></pre></div>
<p>我们这个例子是访问百度</p>
<div class="highlight"><pre><code class="ruby"><span class="ss">Feature</span><span class="p">:</span> <span class="no">Using</span> <span class="n">baidu</span>

<span class="ss">Scenario</span><span class="p">:</span> <span class="no">Searching</span> <span class="k">for</span> <span class="n">a</span> <span class="n">term</span>

<span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="n">baidu</span><span class="o">.</span><span class="n">com</span>
<span class="no">When</span> <span class="n">I</span> <span class="n">enter</span> <span class="s2">&quot;pizza&quot;</span>
<span class="no">And</span> <span class="n">I</span> <span class="n">press</span> <span class="s2">&quot;百度一下&quot;</span>
<span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="s2">&quot;pizza_百度百科&quot;</span>
</code></pre></div>
<p>Given/When/And/Then很明了的告诉我们，打开百度，输入pizza，然后点击百度一下，然后就能看到pizza_百度百科。</p>
<div class="highlight"><pre><code class="ruby"><span class="no">Given</span> <span class="sr">/^I am on baidu\.com$/</span> <span class="k">do</span>
  <span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://www.baidu.com&quot;</span>
  <span class="n">visit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">When</span> <span class="sr">/^I enter &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">term</span><span class="o">|</span>
  <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;wd&#39;</span><span class="p">,</span><span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">term</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">When</span> <span class="sr">/^(?:|I )press &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">button</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">button</span>
  <span class="n">click_button</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">Then</span> <span class="sr">/^(?:|I )should see &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">text</span><span class="o">|</span>
  <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:should</span>
    <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">assert</span> <span class="n">page</span><span class="o">.</span><span class="n">has_content?</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>接着就是值得一提的env.rb，这是cucumber的环境配置文件。
<blockquote>
The file features/support/env.rb is always the very first file to be loaded when Cucumber starts a test run. You use it to prepare the environment for the rest of your support and step definition code to operate. 
</blockquote></p>
<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;capybara/cucumber&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;capybara/dsl&#39;</span>

<span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://www.baidu.com&quot;</span>
<span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</code></pre></div>
<p>让我们来运行一下</p>
<div class="highlight"><pre><code class="ruby"><span class="n">zhangmatoMacBook</span><span class="o">-</span><span class="ss">Pro</span><span class="p">:</span><span class="n">features</span> <span class="n">lihuazhang</span><span class="err">$</span> <span class="n">cucumber</span> <span class="n">example</span><span class="o">/</span><span class="n">example</span><span class="o">.</span><span class="n">feature</span> 
<span class="ss">Feature</span><span class="p">:</span> <span class="no">Using</span> <span class="n">baidu</span>

  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Searching</span> <span class="k">for</span> <span class="n">a</span> <span class="n">term</span>   <span class="c1"># example/example.feature:4</span>
    <span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="n">baidu</span><span class="o">.</span><span class="n">com</span>        <span class="c1"># example/step_definitions/example_steps.rb:1</span>
    <span class="no">When</span> <span class="n">I</span> <span class="n">enter</span> <span class="s2">&quot;pizza&quot;</span>           <span class="c1"># example/step_definitions/example_steps.rb:6</span>
    <span class="no">And</span> <span class="n">I</span> <span class="n">press</span> <span class="s2">&quot;百度一下&quot;</span>             <span class="c1"># example/step_definitions/example_steps.rb:10</span>
      <span class="err">百度一下</span>
    <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="s2">&quot;pizza_百度百科&quot;</span> <span class="c1"># example/step_definitions/example_steps.rb:15</span>

<span class="mi">1</span> <span class="n">scenario</span> <span class="p">(</span><span class="mi">1</span> <span class="n">passed</span><span class="p">)</span>
<span class="mi">4</span> <span class="n">steps</span> <span class="p">(</span><span class="mi">4</span> <span class="n">passed</span><span class="p">)</span>
<span class="mi">0</span><span class="n">m9</span><span class="o">.</span><span class="mi">184</span><span class="n">s</span>
</code></pre></div>
<p>Nice!</p>

<p>至此，基本的框架搭好了。至于如何配置不同的浏览器，以及如何和page object配合，我们以后再讲。</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/add-google-pretty-code-post</id>
    <title><![CDATA[Add google pretty code support]]></title>
    <updated>2012-04-19T18:18:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/add-google-pretty-code-post.html" />
    <content type="html"><![CDATA[<p><em>Jekyll</em> 本身是不支持语法高亮的。而用 <em>Pygments</em> 又要装插件，看上去也挺复杂的。于是去网上搜索“博客语法高亮”，
然后发现了 <code>google code prettify</code>，心想 google 出品，质量必定可靠.具体请看下<a href="http://code.google.com/p/google-code-prettify/"><strong>google code prettify</strong></a>。</p>

<p>这里就介绍一下，如何使用的。
<ul>
<li>从http://code.google.com/p/google-code-prettify/downloads/list下载最新的代码。</li>
<li>解压出来，得到
<pre>
lang-apollo.js
lang-clj.js
lang-css.js
lang-go.js
lang-hs.js
lang-lisp.js
lang-lua.js
lang-ml.js
lang-n.js
lang-proto.js
lang-scala.js
lang-sql.js
lang-tex.js
lang-vb.js
lang-vhdl.js
lang-wiki.js
lang-xq.js
lang-yaml.js
prettify.css
prettify.js
sunburst.css
</pre>
</li>
<li>把这些文件放到你的项目的目录下去。 </li>
<li>把css文件和js文件应用到页面上去。
<pre class="prettyprint">
&lt;link href=&quot;/js/google-code-prettify/sunburst.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/google-code-prettify/prettify.js&quot;&gt;&lt;/script&gt;
</pre>
在body上加一个onload函数
<pre class="prettyprint">
&lt;body onload=&quot;prettyPrint()&quot; &gt;
</pre>
</li>
<li>然后在要高亮的代码块使用提供的tag，比如：</p>
<div class="highlight"><pre><code class="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint&quot;</span><span class="nt">&gt;</span>
#include <span class="nt">&lt;stdio</span><span class="err">.</span><span class="na">h</span><span class="nt">&gt;</span>

/* the n-th fibonacci number.
 */
unsigned int fib(unsigned int n) {
    unsigned int a = 1, b = 1;
    unsigned int tmp;
    while (--n &gt;= 0) {
        tmp = a;
        a += b;
        b = tmp;
    }
    return a;
}

main() {
    printf(&quot;%u&quot;, fib(10));
}

<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>你不需要指定语言环境,因为 prettyprint() 会对此进行猜测. 你也可以使用 prettyprint 这个类通过指定语言的拓展名来指定语言。
</li>
<li>
你看到的结果就是：</p>
<div class="highlight"><pre><code class="c"><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="cm">/* the n-th fibonacci number.</span>
<span class="cm"> */</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">fib</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
        <span class="n">a</span> <span class="o">+=</span> <span class="n">b</span><span class="p">;</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%u&quot;</span><span class="p">,</span> <span class="n">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>
<p></li>
</ul>
</p>
<p>
看上去不错吧，你也去试试吧！
</p></p>

<p></p>
</pre></li>
</ul>
</strong></p></p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/webdriver-1-post</id>
    <title><![CDATA[WebDriver 1: Set up WebDriver using Maven3]]></title>
    <updated>2012-04-06T00:00:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/webdriver-1-post.html" />
    <content type="html"><![CDATA[<p>
<h6>1. Learn Maven3 first.</h6>
  This is quite simple. Go through <a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven in 5 Minutes</a>
  That's quite enough.
</p>

<p>
<h6>2. Set up project</h6>
Using the command in Maven in 5 Minutes to create a project using your own groupId and artifactId.
<pre class="prettyprint">
mvn archetype:generate -DgroupId=com.ahchoo.automation -DartifactId=ahcoo -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</pre>
</p>

<p>
Change the pom.xml to add Junit and WebDriver dependencies
<pre class="prettyprint">
&lt;project&gt;
...
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.10&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;
            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;
            &lt;version&gt;2.20.0&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;/dependencies&gt;&lt;/scope&gt;&lt;/version&gt;&lt;/artifactId&gt;&lt;/groupId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
...
&lt;/project&gt;
</pre>
Then run <code class="cmd">mvn clean install</code>
</p>

<p>
<h6>3. Using eclipse to import this project</h6>
install <a href="http://eclipse.org/m2e/">m2eclipse</a> and
run command in the project root directory:
<pre class="prettyprint">
mvn eclipse:clean
mvn eclipse:eclipse
</pre>

open eclise, click File and choose Import:
<p>
    <img src="/photos/1.png">
</p>

<p>Choose Existing Projects into Workspace
<p>
    <img src="/photos/2.png">
</p></p>

<p>After import, you will see the file tree in eclipse project explorer:
<p>
<img src="/photos/3.png">
</p>
</p></p>

<p>Thus the environment is set up.</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/learn-vim-3-post</id>
    <title><![CDATA[vim学习 jsctags]]></title>
    <updated>2012-03-08T00:00:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/learn-vim-3-post.html" />
    <content type="html"><![CDATA[<p>
ctags不能非常胜任对现在的javascript代码的解析，尤其是遇到：
<pre class="prettyprint">
Test.object.do = function(obj) {// ...}
ajaxSetup: function( settings ) {//..}
</pre>
网上搜索了下，发现了doctorjs.git (以前叫jsctags), 号称被应用于Cloud9 IDE's Ace online editor.
<div class="comment">
<ul>
  <li>安装doctorjs需要nodejs环境，如何安装nodejs自己google去</li>
  <li>安装ctags，brew也好macports也好。</li>
  <li>git  clone https://github.com/mozilla/doctorjs.git --recursive</li>
  <li>make install</li>
  <li>Add export NODE_PATH=/usr/local/lib/jsctags/:$NODE_PATH to your .zshrc or .bashrc</li>
  <li>然后就可以使用了，直接jsctags your_js_dir</li>
  <li>配合vim的tagbar非常好用。</li>
</ul>
</div>

</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/learn-vim-2-post</id>
    <title><![CDATA[vim学习 shiftwidth, tabstop, softtabstop和expandtab]]></title>
    <updated>2012-03-07T00:00:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/learn-vim-2-post.html" />
    <content type="html"><![CDATA[<p>
<h6>1. shiftwidth</h6>
<p>
这个是用于程序中自动缩进所使用的空白长度指示的。一般来说为了保持程序的美观，和下面的参数最好一致。同时它也是符号移位(>>)长度的制定者。
</p>

<p></p></p>

<p>
<h6>2. tabstop
</h6>
<p>
定义tab所等同的空格长度，一般来说最好设置成8，因为如果是其它值的话，可能引起文件在打印之类的场合中看起来很别扭。
除非你设置了 expandtab模式，也就是把tabs转换成空格，这样的话就不会一起混淆，不过毕竟制表符为8是最常用最普遍的设置，所以一般还是不要改。
(lz总是把它设置为4个空格)
</p>

<p></p>
<p>
<h6>3. softtabstop</h6>
<p>
如果我们希望改变程序中的缩进怎么办？shiftwidth和tabstop不一样的话，你会发现程序比较难看的。
这时候，softtabstop就起作用了。可以从vim的说明中看到，一旦设置了softtabstop的值时，你按下tab键，
插入的是空格和tab制表符的混合，具体如何混合取决于你设定的softtabstop，举个例子，如果设定softtabstop=8,
那么按下tab键，插入的就是正常的一个制表符;如果设定 softtabstop=16,那么插入的就是两个制表符；如果softtabstop=12,
那么插入的就是一个制表符加上4个空格；如果 softtabstop=4呢？那么一开始，插入的就是4个空格，此时一旦你再按下一次tab，
这次的四个空格就会和上次的四个空格组合起来变成一个制表符。
换句话说，softtabstop是“逢8空格进1制表符”,前提是你tabstop=8。
</p>
</p>
<p>
<h6>4. expandtab</h6>
<p>
因为tab的大小不一样，在多人一起开发项目时，为了使代码风格尽量保持一致，
一般不允许在代码使用TAB符，而以4个空格代之。
</p>
</p></p>

<p>一般的shiftwidth, tabstop, softtabstop和expandtab的配置</p>

<pre class="prettyprint">
set shiftwidth=4                " use indents of 4 spaces
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent
set expandtab                   " tabs are spaces, not tabs
</pre>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/learn-vim-1-post</id>
    <title><![CDATA[vim学习 listchars]]></title>
    <updated>2012-03-07T00:00:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/learn-vim-1-post.html" />
    <content type="html"><![CDATA[<p>
在ruby-china.org混，看到很多vimer，于是就请教了如何学习vim，@jinleileiking同学就给了建议，非常中用，他说：
<div class="comment">
<ul>
<li>vimcasts.org 类似railscasts</li>
<li>[学习vi和Vim编辑器(第7版)].(Learning.the.vi.and.Vim.Editors.7th.Edition).A.Robbins&E.Hannah&L.Lamb.文字版</li>
<li>[Hacking.Vim].[Hacking.Vim].[Hacking.Vim].Packt.Publishing.Hacking.Vim.May.2007</li>
<li>:help vim内置帮助</li>
</div>
</ul>
</p>

<p>
    先看vimcasts.org, 第一章：[显示不可视的字符] (http://vimcasts.org/episodes/show-invisibles/)
<pre class="prettyprint">
" 设置显示空格，tab的切换键
nmap &lt;leader&gt;l :set list!<CR>

" 设置tab用小三角加重复的空格显示，换行用横折符号显示。可以:help listchars
set listchars=tab:▸\ ,eol:¬
</pre>
</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/zsh-config-post</id>
    <title><![CDATA[oh my zsh]]></title>
    <updated>2012-03-04T00:00:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/zsh-config-post.html" />
    <content type="html"><![CDATA[<p>Mac自带zsh， 先设置你的默认shell为zsh</p>

<pre class="prettyprint">
chsh -s /bin/zsh
</pre>

<p>
然后使用oh-my-zsh的配置。参见<a href="https://github.com/robbyrussell/oh-my-zsh/">oh my zsh</a>
<pre class="prettyprint">
cd ~
curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</pre>
</p>

<p>修改.zshrc,把你需要的环境变量配置全部加到.zshrc中去。定义自己的主题。可以在.oh-my-zsh/themes下面找到所有的主题
同时你也可以去<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">themes</a>里去找你喜欢的主题。个人比较喜欢gnzh.
<pre class="prettyprint">
zhangmatoMacBook-Pro.local ~/.oh-my-zsh/themes  ‹master› 
Soliah.zsh-theme              daveverwer.zsh-theme          frisk.zsh-theme               josh.zsh-theme                mikeh.zsh-theme               rgm.zsh-theme                 suvash.zsh-theme
afowler.zsh-theme             dieter.zsh-theme              funky.zsh-theme               jreese.zsh-theme              miloshadzic.zsh-theme         risto.zsh-theme               takashiyoshida.zsh-theme
...
</pre>
</p>

<p>安装插件，在.zshrc文件里找到"plugins=",然后在里面添加你所需要的插件，你安装的插件可以在.oh-my-zsh/plugins下面找到。
<pre class="prettyprint">
plugins=(rails3 rails git textmate ruby rvm gem git github brew bundler textmate pow)
</pre>
</p>

<p>
重启下终端，然后就可以使用订制好的zsh了。
</p>

<p>
<img src="/photos/zsh.png"></img>
</p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/use-spf13-vim-config-post</id>
    <title><![CDATA[vim配置]]></title>
    <updated>2012-02-23T00:00:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/use-spf13-vim-config-post.html" />
    <content type="html"><![CDATA[<p>一直用vi，也没仔细研究过，也不会配置，在网上发现<a href="http://spf13.com/project/spf13-vim"><strong> spf13-vim </strong></a>,安装配置十分方便，于是便想推荐大家使用。</p>

<p>只需在终端敲打
    <pre class="prettyprint">curl https://raw.github.com/spf13/spf13-vim/3.0/bootstrap.sh -L -o - | sh </pre>
    等待数分钟，安装全部完成。具体细节不介绍，spf13-vim的网站上有详细介绍。
</p>

<p>结束之后还需要.vimrc里加入
<pre class="prettyprint">
set t_Co=256
</pre>
</p>

<p>
使用spf13-vim需要vim支持python，mac下的vim本身是不支持python的，如何验证vim支持python。
<pre class="prettyprint">
:python print "Hello, world!"
</pre>
看到输出结果是Hello，world!就是支持python了。
如果不知道的话，那就要安装一个支持python的vim
<pre class="prettyprint">
sudo port install vim +python +ruby
</pre>
安装之后，使用vi，如果发现有libiconv的问题，把你env里面的DYLD_LIBRARY_PATH去掉。
</p>

<p>全部搞定，在用用你的vi看看，是不是很惊艳？</p>

<p><img src="/photos/vim.png"></img></p>
]]></content>
  </entry>
  
  <entry>
    <id>http://8atmyhouse.com/blog/cucumber-1-post</id>
    <title><![CDATA[Cucumber-第一章 为什么使用小黄瓜？]]></title>
    <updated>2012-02-21T00:00:00+08:00</updated>
    <link href="http://8atmyhouse.com/blog/cucumber-1-post.html" />
    <content type="html"><![CDATA[<p>软件始于想法。</p>

<p>假设这个想法是一个好的创意——一个可以使世界更美好的创意，或者至少可以让某些人赚点小钱。</p>

<p>那么如何让软件开发者接受这个创意并且真正实现这个能带来利益的创意，就是一个巨大的挑战。</p>

<p>最初的创意是完美且优雅的。如果这个创意的主人恰巧是一个天才的软件开发人员，那么我们可能会很幸运：这个创意不需要对任何人解释就能被实现为一个能工作的软件。然而，通常更多的是，有着最初创意的人往往不是有这本事实现该创意的人。于是这个创意就不得不从一个人的脑子里跑到另外个人的脑子里。这就是沟通。<p>

<p>大多数的软件工程需要团队一起协同工作，高质量的沟通就成了成功的关键。你可能知道，好的沟通并不仅仅是清楚地想别人描述你的想法。你也需要征集大家的回馈，确保你的理解是正确的。这就是为什么敏捷软件开发团队会步步为营，不断地构建软件并向相关人士征求意见，“这是你的意思么？”。</p>

<p>然而，即便这样也是不够的。如果开发人员用两个2周的迭代实现了一个错误的想法，不仅仅是开发人员浪费了2周的精力，由于误解产生的概念和功能还破坏了整个代码库的完整性。其他程序员在完全不知情的情况下，可能已经在这些不好的想法上构建了更多的代码。这使得从代码库里整个移除这些错误实现的代码变得非常困难。</p>

<p>所以我们需要一种过滤来保护我们的代码库远离这些被误解的想法。</p>

<p>
<h6>1.1 自动化验收测试</h6>
</p>

<p>
自动化验收测试的想法最初来自极限编程(XP)，更确切地说起源于测试驱动开发的实践。开发人员和业务相关人员合作编写能满足业务相关人员需求的自动化测试，而不是由业务相关人员直接把需求交与开发团队。我们称这种测试为自动化验收测试。这些测试一开始是不能运行的，因为代码还没有写。但是它抓住了业务相关人员真正关注的，同时也给大家一个明确的信号，嗯，这些是要做的。
</p>

<p>
这类测试和单元测试不同之处在于：自动化验收测试是针对开发人员的，它可以帮助开发人员正确地写出并检查他们的软件设计。有时候我们说单元测试确保你正确地构建出产品（build the thing right），而验收测试确保你构建出正确的产品（build the right thing）。
</p>

<p>
自动化验收测试在良好的XP团队之间已经经过多年的实践，但是还是有很多缺乏经验的敏捷团队似乎只看到TDD。正如Lisa Crispin 和 Janet Gregory在Agile Testing: A Practical Guide for Testers and Agile Teams CG08 指出，没有面向业务的自动化验收测试，程序员很难知道哪些单元测试需要编写。自动化验收测试，帮助你的团队集中注意力，并确保在每个迭代里你的工作是你可能会做的最宝贵的东西。你可能还会犯错，但你少了很多-这就意味着你就可以准时回家和享受你的余生。

</p>

<h6>1.2 行为驱动开发</h6>

<p>
行为驱动开发，简称BDD，它基于测试驱动开发模式之上，通过规范化那些最杰出的TDD实践者的好习惯，从而规划出的一套开发模式。
我们经常可以看见，客户从他们的观点出发给出了一套验收测试，而我们最棒的TDD们恰恰未能理解或者干脆误解了。而我们BDD的实践者正好
在这里把关，我们将验收测试写成一个个通俗易懂的例子，让每个团队成员都能读懂。而我们正好利用这个过程从客户那边也得到反馈。这样
就确保在开始之前，我们就知道即将做的软件是正确的，是客户想要的。
在这个过程中，我们有意识地创建了一门大家都看得懂，易于分享的通用语言。
</p>

<h6>通用语言</h6>

<p>
正如Eric Evans在Domain Driven Design里描述的，在许多软件项目，软件工程师和某领域专家的交流十分的痛苦，而且没有质量。专家有专家的术语，工程师有工程师的暗号。
正是意识到这点，如果有一门通用语言，那么所有项目相关人员都可以使用，都能明白。撇弃每个人的方言，在交谈中，在文档中，在代码中，都使用这通用语言，那样就会大大
降低误解的几率。
</p>

<p>
Cucumber的出现正好可以帮助团队使用通用语言，让开发人员和领域专家有一个可沟通的环境。Cucumber测试案例可以直接和代码交互，但是这些测试代码用一种中间层的语言
撰写，而这个语言也正是我们的客户或者专家能明白的。通过开发人员和客户一起撰写这种测试，不仅能让开发人员明白他们即将实现的是什么样子的行为，更能让他们学习
如何用更通常的语言来描述软件行为，以便于让每个人都能明白。
</p>

<p>
在开始开发之前，写这些测试，我们可以探究并消除许多误解，在这些误解进入代码之前。
</p>

<h6>例子</h6>

<p>
使Cucumber可以在许许多多同样类型的测试套件中脱颖而出的原因在于它经过了专门的设计，来保证团队里的每个人都能读写这些验收测试。
事实上，这也表明了验收测试的价值所在：一个用来沟通和合作的工具。Cucumber测试的易读性可以让客户参与到这个过程中，并真正帮助你
探究和理解他们的需求。

这里有一个例子：

```ruby
Feature: Sign up
    Sign up should be quick and friendly.

    Scenario: Successful sign up
        New users should get a confirmation email and be greeted
        personally by the site once signed in.

        Given I have chosen to sign up
        When I sign up with valid details
        Then I should receive a confirmation email
        And I should see a personalized greeting message

    Scenario: Duplicate email

        Where someone tries to create an account for an email address
        that already exists.

        Given I have chosen to sign up
        But I enter an email address that has already registered
        Then I should be told that the email is already registered
        And I should be offered the option to recover my password
```

可以注意到，我们用特定的场景来描述测试案例。这样的形式有意想不到的效果，人们可以直观的看到这个系统的行为，即使这个系统还没开始开发。
任何团队成员可以读懂这样的测试并告诉你这是否是系统真正想要做的。同样它会激发你的想象力，举一反三。
</p>

<p>
用这种形式撰写的验收测试就不仅仅是测试。它们是可执行的规范。
</p>

<h6>活文档</h6>

<p>因为业务相关人士可以撰写 Cucumber 测试，所以 Cucumber  不仅有传统文档的优点， 更有着它独一无二的优势，就是可以随时在电脑上运行。
这也意味着它不像传统文档那样写好了就放在那里，等它慢慢过时。 Cucumber 测试成为一个活着的东西并至始至终反应着整个项目的状态。</p>

<p><strong>真相的源头</strong></p>

<p>对于很多团队来说，需要明确一个系统到底要做什么，但是很多时候，开发并不真正了解需求，只有在写代码的时候，才突然恍然大悟，“哦！原来如此！”，
又或者勃然大怒，“这根本就行不通，需求要改”。又或者项目经理突然说“哎呀，这地方要加个超链接”等等。总是会有不和谐的地方出现。
<strong>所以我们花费大量的时间去同步需求文档，测试和代码。</strong>
不幸的是，很多情况经常改了代码，忘记改测试，改了测试忘记改需求，于是到后来差别越来越大，也越来越难维护。</p>

<p>Cucumber 测试就是把这些需求的东西都剥离出来，在一个单独的地方来追踪这些信息，这样无论是哪个环节出错，你只需要去更改 Cucumber 测试。
这样就可以节约许多时间。这也能帮助建立团队间的信任，因为真相只有一个 Cucumber，没有人会有不同的观点。</p>

<h6>Cucumber 是如何工作的</h6>
]]></content>
  </entry>
  
</feed>
